
guardia_reverse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a8  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004b70  08004b70  00005b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c7c  08004c7c  00006014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c7c  08004c7c  00005c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c84  08004c84  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c84  08004c84  00005c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c88  08004c88  00005c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004c8c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000014  08004ca0  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08004ca0  000061bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe46  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225e  00000000  00000000  00015e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  000180e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a77  00000000  00000000  00018e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267d6  00000000  00000000  000198bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113cf  00000000  00000000  00040095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1dac  00000000  00000000  00051464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143210  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a4  00000000  00000000  00143254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001469f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004b58 	.word	0x08004b58

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	08004b58 	.word	0x08004b58

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <__aeabi_uldivmod>:
 800021c:	b953      	cbnz	r3, 8000234 <__aeabi_uldivmod+0x18>
 800021e:	b94a      	cbnz	r2, 8000234 <__aeabi_uldivmod+0x18>
 8000220:	2900      	cmp	r1, #0
 8000222:	bf08      	it	eq
 8000224:	2800      	cmpeq	r0, #0
 8000226:	bf1c      	itt	ne
 8000228:	f04f 31ff 	movne.w	r1, #4294967295
 800022c:	f04f 30ff 	movne.w	r0, #4294967295
 8000230:	f000 b988 	b.w	8000544 <__aeabi_idiv0>
 8000234:	f1ad 0c08 	sub.w	ip, sp, #8
 8000238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800023c:	f000 f806 	bl	800024c <__udivmoddi4>
 8000240:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000248:	b004      	add	sp, #16
 800024a:	4770      	bx	lr

0800024c <__udivmoddi4>:
 800024c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000250:	9d08      	ldr	r5, [sp, #32]
 8000252:	468e      	mov	lr, r1
 8000254:	4604      	mov	r4, r0
 8000256:	4688      	mov	r8, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14a      	bne.n	80002f2 <__udivmoddi4+0xa6>
 800025c:	428a      	cmp	r2, r1
 800025e:	4617      	mov	r7, r2
 8000260:	d962      	bls.n	8000328 <__udivmoddi4+0xdc>
 8000262:	fab2 f682 	clz	r6, r2
 8000266:	b14e      	cbz	r6, 800027c <__udivmoddi4+0x30>
 8000268:	f1c6 0320 	rsb	r3, r6, #32
 800026c:	fa01 f806 	lsl.w	r8, r1, r6
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	40b7      	lsls	r7, r6
 8000276:	ea43 0808 	orr.w	r8, r3, r8
 800027a:	40b4      	lsls	r4, r6
 800027c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000280:	fa1f fc87 	uxth.w	ip, r7
 8000284:	fbb8 f1fe 	udiv	r1, r8, lr
 8000288:	0c23      	lsrs	r3, r4, #16
 800028a:	fb0e 8811 	mls	r8, lr, r1, r8
 800028e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000292:	fb01 f20c 	mul.w	r2, r1, ip
 8000296:	429a      	cmp	r2, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x62>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a0:	f080 80ea 	bcs.w	8000478 <__udivmoddi4+0x22c>
 80002a4:	429a      	cmp	r2, r3
 80002a6:	f240 80e7 	bls.w	8000478 <__udivmoddi4+0x22c>
 80002aa:	3902      	subs	r1, #2
 80002ac:	443b      	add	r3, r7
 80002ae:	1a9a      	subs	r2, r3, r2
 80002b0:	b2a3      	uxth	r3, r4
 80002b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002be:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c2:	459c      	cmp	ip, r3
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0x8e>
 80002c6:	18fb      	adds	r3, r7, r3
 80002c8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002cc:	f080 80d6 	bcs.w	800047c <__udivmoddi4+0x230>
 80002d0:	459c      	cmp	ip, r3
 80002d2:	f240 80d3 	bls.w	800047c <__udivmoddi4+0x230>
 80002d6:	443b      	add	r3, r7
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002de:	eba3 030c 	sub.w	r3, r3, ip
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa2>
 80002e6:	40f3      	lsrs	r3, r6
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xb6>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb0>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa2>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x14c>
 800030a:	4573      	cmp	r3, lr
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xc8>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 8105 	bhi.w	800051e <__udivmoddi4+0x2d2>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb6e 0203 	sbc.w	r2, lr, r3
 800031a:	2001      	movs	r0, #1
 800031c:	4690      	mov	r8, r2
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e5      	beq.n	80002ee <__udivmoddi4+0xa2>
 8000322:	e9c5 4800 	strd	r4, r8, [r5]
 8000326:	e7e2      	b.n	80002ee <__udivmoddi4+0xa2>
 8000328:	2a00      	cmp	r2, #0
 800032a:	f000 8090 	beq.w	800044e <__udivmoddi4+0x202>
 800032e:	fab2 f682 	clz	r6, r2
 8000332:	2e00      	cmp	r6, #0
 8000334:	f040 80a4 	bne.w	8000480 <__udivmoddi4+0x234>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	0c03      	lsrs	r3, r0, #16
 800033c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000340:	b280      	uxth	r0, r0
 8000342:	b2bc      	uxth	r4, r7
 8000344:	2101      	movs	r1, #1
 8000346:	fbb2 fcfe 	udiv	ip, r2, lr
 800034a:	fb0e 221c 	mls	r2, lr, ip, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb04 f20c 	mul.w	r2, r4, ip
 8000356:	429a      	cmp	r2, r3
 8000358:	d907      	bls.n	800036a <__udivmoddi4+0x11e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x11c>
 8000362:	429a      	cmp	r2, r3
 8000364:	f200 80e0 	bhi.w	8000528 <__udivmoddi4+0x2dc>
 8000368:	46c4      	mov	ip, r8
 800036a:	1a9b      	subs	r3, r3, r2
 800036c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000370:	fb0e 3312 	mls	r3, lr, r2, r3
 8000374:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000378:	fb02 f404 	mul.w	r4, r2, r4
 800037c:	429c      	cmp	r4, r3
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x144>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f102 30ff 	add.w	r0, r2, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x142>
 8000388:	429c      	cmp	r4, r3
 800038a:	f200 80ca 	bhi.w	8000522 <__udivmoddi4+0x2d6>
 800038e:	4602      	mov	r2, r0
 8000390:	1b1b      	subs	r3, r3, r4
 8000392:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x98>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa0e f401 	lsl.w	r4, lr, r1
 80003a8:	fa20 f306 	lsr.w	r3, r0, r6
 80003ac:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fa00 f801 	lsl.w	r8, r0, r1
 80003ba:	fa1f fc87 	uxth.w	ip, r7
 80003be:	fbbe f0f9 	udiv	r0, lr, r9
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003cc:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d0:	45a6      	cmp	lr, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x1a0>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f100 3aff 	add.w	sl, r0, #4294967295
 80003de:	f080 809c 	bcs.w	800051a <__udivmoddi4+0x2ce>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f240 8099 	bls.w	800051a <__udivmoddi4+0x2ce>
 80003e8:	3802      	subs	r0, #2
 80003ea:	443c      	add	r4, r7
 80003ec:	eba4 040e 	sub.w	r4, r4, lr
 80003f0:	fa1f fe83 	uxth.w	lr, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000400:	fb03 fc0c 	mul.w	ip, r3, ip
 8000404:	45a4      	cmp	ip, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1ce>
 8000408:	193c      	adds	r4, r7, r4
 800040a:	f103 3eff 	add.w	lr, r3, #4294967295
 800040e:	f080 8082 	bcs.w	8000516 <__udivmoddi4+0x2ca>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d97f      	bls.n	8000516 <__udivmoddi4+0x2ca>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041e:	eba4 040c 	sub.w	r4, r4, ip
 8000422:	fba0 ec02 	umull	lr, ip, r0, r2
 8000426:	4564      	cmp	r4, ip
 8000428:	4673      	mov	r3, lr
 800042a:	46e1      	mov	r9, ip
 800042c:	d362      	bcc.n	80004f4 <__udivmoddi4+0x2a8>
 800042e:	d05f      	beq.n	80004f0 <__udivmoddi4+0x2a4>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x1fe>
 8000432:	ebb8 0203 	subs.w	r2, r8, r3
 8000436:	eb64 0409 	sbc.w	r4, r4, r9
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	fa22 f301 	lsr.w	r3, r2, r1
 8000442:	431e      	orrs	r6, r3
 8000444:	40cc      	lsrs	r4, r1
 8000446:	e9c5 6400 	strd	r6, r4, [r5]
 800044a:	2100      	movs	r1, #0
 800044c:	e74f      	b.n	80002ee <__udivmoddi4+0xa2>
 800044e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000452:	0c01      	lsrs	r1, r0, #16
 8000454:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000458:	b280      	uxth	r0, r0
 800045a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045e:	463b      	mov	r3, r7
 8000460:	4638      	mov	r0, r7
 8000462:	463c      	mov	r4, r7
 8000464:	46b8      	mov	r8, r7
 8000466:	46be      	mov	lr, r7
 8000468:	2620      	movs	r6, #32
 800046a:	fbb1 f1f7 	udiv	r1, r1, r7
 800046e:	eba2 0208 	sub.w	r2, r2, r8
 8000472:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000476:	e766      	b.n	8000346 <__udivmoddi4+0xfa>
 8000478:	4601      	mov	r1, r0
 800047a:	e718      	b.n	80002ae <__udivmoddi4+0x62>
 800047c:	4610      	mov	r0, r2
 800047e:	e72c      	b.n	80002da <__udivmoddi4+0x8e>
 8000480:	f1c6 0220 	rsb	r2, r6, #32
 8000484:	fa2e f302 	lsr.w	r3, lr, r2
 8000488:	40b7      	lsls	r7, r6
 800048a:	40b1      	lsls	r1, r6
 800048c:	fa20 f202 	lsr.w	r2, r0, r2
 8000490:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000494:	430a      	orrs	r2, r1
 8000496:	fbb3 f8fe 	udiv	r8, r3, lr
 800049a:	b2bc      	uxth	r4, r7
 800049c:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a0:	0c11      	lsrs	r1, r2, #16
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb08 f904 	mul.w	r9, r8, r4
 80004aa:	40b0      	lsls	r0, r6
 80004ac:	4589      	cmp	r9, r1
 80004ae:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b2:	b280      	uxth	r0, r0
 80004b4:	d93e      	bls.n	8000534 <__udivmoddi4+0x2e8>
 80004b6:	1879      	adds	r1, r7, r1
 80004b8:	f108 3cff 	add.w	ip, r8, #4294967295
 80004bc:	d201      	bcs.n	80004c2 <__udivmoddi4+0x276>
 80004be:	4589      	cmp	r9, r1
 80004c0:	d81f      	bhi.n	8000502 <__udivmoddi4+0x2b6>
 80004c2:	eba1 0109 	sub.w	r1, r1, r9
 80004c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ca:	fb09 f804 	mul.w	r8, r9, r4
 80004ce:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d2:	b292      	uxth	r2, r2
 80004d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d8:	4542      	cmp	r2, r8
 80004da:	d229      	bcs.n	8000530 <__udivmoddi4+0x2e4>
 80004dc:	18ba      	adds	r2, r7, r2
 80004de:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e2:	d2c4      	bcs.n	800046e <__udivmoddi4+0x222>
 80004e4:	4542      	cmp	r2, r8
 80004e6:	d2c2      	bcs.n	800046e <__udivmoddi4+0x222>
 80004e8:	f1a9 0102 	sub.w	r1, r9, #2
 80004ec:	443a      	add	r2, r7
 80004ee:	e7be      	b.n	800046e <__udivmoddi4+0x222>
 80004f0:	45f0      	cmp	r8, lr
 80004f2:	d29d      	bcs.n	8000430 <__udivmoddi4+0x1e4>
 80004f4:	ebbe 0302 	subs.w	r3, lr, r2
 80004f8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004fc:	3801      	subs	r0, #1
 80004fe:	46e1      	mov	r9, ip
 8000500:	e796      	b.n	8000430 <__udivmoddi4+0x1e4>
 8000502:	eba7 0909 	sub.w	r9, r7, r9
 8000506:	4449      	add	r1, r9
 8000508:	f1a8 0c02 	sub.w	ip, r8, #2
 800050c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000510:	fb09 f804 	mul.w	r8, r9, r4
 8000514:	e7db      	b.n	80004ce <__udivmoddi4+0x282>
 8000516:	4673      	mov	r3, lr
 8000518:	e77f      	b.n	800041a <__udivmoddi4+0x1ce>
 800051a:	4650      	mov	r0, sl
 800051c:	e766      	b.n	80003ec <__udivmoddi4+0x1a0>
 800051e:	4608      	mov	r0, r1
 8000520:	e6fd      	b.n	800031e <__udivmoddi4+0xd2>
 8000522:	443b      	add	r3, r7
 8000524:	3a02      	subs	r2, #2
 8000526:	e733      	b.n	8000390 <__udivmoddi4+0x144>
 8000528:	f1ac 0c02 	sub.w	ip, ip, #2
 800052c:	443b      	add	r3, r7
 800052e:	e71c      	b.n	800036a <__udivmoddi4+0x11e>
 8000530:	4649      	mov	r1, r9
 8000532:	e79c      	b.n	800046e <__udivmoddi4+0x222>
 8000534:	eba1 0109 	sub.w	r1, r1, r9
 8000538:	46c4      	mov	ip, r8
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	e7c4      	b.n	80004ce <__udivmoddi4+0x282>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800055e:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <MX_GPIO_Init+0xbc>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a28      	ldr	r2, [pc, #160]	@ (8000604 <MX_GPIO_Init+0xbc>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <MX_GPIO_Init+0xbc>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000576:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <MX_GPIO_Init+0xbc>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <MX_GPIO_Init+0xbc>)
 800057c:	f043 0302 	orr.w	r3, r3, #2
 8000580:	6313      	str	r3, [r2, #48]	@ 0x30
 8000582:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <MX_GPIO_Init+0xbc>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	f003 0302 	and.w	r3, r3, #2
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <MX_GPIO_Init+0xbc>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	4a1c      	ldr	r2, [pc, #112]	@ (8000604 <MX_GPIO_Init+0xbc>)
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	6313      	str	r3, [r2, #48]	@ 0x30
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <MX_GPIO_Init+0xbc>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	f003 0308 	and.w	r3, r3, #8
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_led_Pin|red_led_Pin|blue_led_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005ac:	4816      	ldr	r0, [pc, #88]	@ (8000608 <MX_GPIO_Init+0xc0>)
 80005ae:	f001 fa0d 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 80005b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005b8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	4810      	ldr	r0, [pc, #64]	@ (800060c <MX_GPIO_Init+0xc4>)
 80005ca:	f001 f853 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_led_Pin red_led_Pin blue_led_Pin */
  GPIO_InitStruct.Pin = green_led_Pin|red_led_Pin|blue_led_Pin;
 80005ce:	f244 0381 	movw	r3, #16513	@ 0x4081
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	4808      	ldr	r0, [pc, #32]	@ (8000608 <MX_GPIO_Init+0xc0>)
 80005e8:	f001 f844 	bl	8001674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2028      	movs	r0, #40	@ 0x28
 80005f2:	f000 fefe 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005f6:	2028      	movs	r0, #40	@ 0x28
 80005f8:	f000 ff17 	bl	800142a <HAL_NVIC_EnableIRQ>

}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40020400 	.word	0x40020400
 800060c:	40020800 	.word	0x40020800

08000610 <chenillard1>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void chenillard1(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	f244 0181 	movw	r1, #16513	@ 0x4081
 800061a:	481a      	ldr	r0, [pc, #104]	@ (8000684 <chenillard1+0x74>)
 800061c:	f001 f9d6 	bl	80019cc <HAL_GPIO_WritePin>
    if (led == GPIO_PIN_0)
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <chenillard1+0x78>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d103      	bne.n	8000630 <chenillard1+0x20>
	{
    	led = GPIO_PIN_7;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <chenillard1+0x78>)
 800062a:	2280      	movs	r2, #128	@ 0x80
 800062c:	801a      	strh	r2, [r3, #0]
 800062e:	e021      	b.n	8000674 <chenillard1+0x64>
	}
	else if (led == GPIO_PIN_7 && chenillard1State == 0)
 8000630:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <chenillard1+0x78>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	2b80      	cmp	r3, #128	@ 0x80
 8000636:	d10b      	bne.n	8000650 <chenillard1+0x40>
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <chenillard1+0x7c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d107      	bne.n	8000650 <chenillard1+0x40>
	{
		led = GPIO_PIN_14;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <chenillard1+0x78>)
 8000642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000646:	801a      	strh	r2, [r3, #0]
		chenillard1State = 1;
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <chenillard1+0x7c>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	e011      	b.n	8000674 <chenillard1+0x64>
	}
	else if (led == GPIO_PIN_7 && chenillard1State == 1)
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <chenillard1+0x78>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	2b80      	cmp	r3, #128	@ 0x80
 8000656:	d10a      	bne.n	800066e <chenillard1+0x5e>
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <chenillard1+0x7c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d106      	bne.n	800066e <chenillard1+0x5e>
	{
		led = GPIO_PIN_0;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <chenillard1+0x78>)
 8000662:	2201      	movs	r2, #1
 8000664:	801a      	strh	r2, [r3, #0]
		chenillard1State = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <chenillard1+0x7c>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	e002      	b.n	8000674 <chenillard1+0x64>
	}
	else {
		led = GPIO_PIN_7;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <chenillard1+0x78>)
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	801a      	strh	r2, [r3, #0]
	}
	HAL_GPIO_TogglePin(GPIOB, led);
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <chenillard1+0x78>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	4802      	ldr	r0, [pc, #8]	@ (8000684 <chenillard1+0x74>)
 800067c:	f001 f9bf 	bl	80019fe <HAL_GPIO_TogglePin>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020400 	.word	0x40020400
 8000688:	20000004 	.word	0x20000004
 800068c:	20000044 	.word	0x20000044

08000690 <chenillard2>:

void chenillard2(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	f244 0181 	movw	r1, #16513	@ 0x4081
 800069a:	4812      	ldr	r0, [pc, #72]	@ (80006e4 <chenillard2+0x54>)
 800069c:	f001 f996 	bl	80019cc <HAL_GPIO_WritePin>
     if (led == GPIO_PIN_7){
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <chenillard2+0x58>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	2b80      	cmp	r3, #128	@ 0x80
 80006a6:	d103      	bne.n	80006b0 <chenillard2+0x20>
    	 led = GPIO_PIN_0;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <chenillard2+0x58>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	801a      	strh	r2, [r3, #0]
 80006ae:	e002      	b.n	80006b6 <chenillard2+0x26>
     }
	 else {
		 led = GPIO_PIN_7;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <chenillard2+0x58>)
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	801a      	strh	r2, [r3, #0]
	 }
     if (led == GPIO_PIN_0) {
 80006b6:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <chenillard2+0x58>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d109      	bne.n	80006d2 <chenillard2+0x42>
         HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80006be:	2101      	movs	r1, #1
 80006c0:	4808      	ldr	r0, [pc, #32]	@ (80006e4 <chenillard2+0x54>)
 80006c2:	f001 f99c 	bl	80019fe <HAL_GPIO_TogglePin>
         HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ca:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <chenillard2+0x54>)
 80006cc:	f001 f997 	bl	80019fe <HAL_GPIO_TogglePin>
     }
     else {
    	 HAL_GPIO_TogglePin(GPIOB, led);
     }
}
 80006d0:	e005      	b.n	80006de <chenillard2+0x4e>
    	 HAL_GPIO_TogglePin(GPIOB, led);
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <chenillard2+0x58>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <chenillard2+0x54>)
 80006da:	f001 f990 	bl	80019fe <HAL_GPIO_TogglePin>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40020400 	.word	0x40020400
 80006e8:	20000004 	.word	0x20000004

080006ec <chenillard3>:

void chenillard3(GPIO_PinState state){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14, state);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	461a      	mov	r2, r3
 80006fa:	f244 0181 	movw	r1, #16513	@ 0x4081
 80006fe:	4803      	ldr	r0, [pc, #12]	@ (800070c <chenillard3+0x20>)
 8000700:	f001 f964 	bl	80019cc <HAL_GPIO_WritePin>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40020400 	.word	0x40020400

08000710 <stopTimers>:

void stopTimers(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Stop_IT(&htim2);
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <stopTimers+0x1c>)
 8000716:	f002 faef 	bl	8002cf8 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(&htim3);
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <stopTimers+0x20>)
 800071c:	f002 faec 	bl	8002cf8 <HAL_TIM_Base_Stop_IT>
	  HAL_TIM_Base_Stop_IT(&htim4);
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <stopTimers+0x24>)
 8000722:	f002 fae9 	bl	8002cf8 <HAL_TIM_Base_Stop_IT>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000004c 	.word	0x2000004c
 8000730:	20000098 	.word	0x20000098
 8000734:	200000e4 	.word	0x200000e4

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800073c:	f000 fa50 	bl	8000be0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000740:	f000 fd1f 	bl	8001182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000744:	f000 f81e 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000748:	f7ff fefe 	bl	8000548 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800074c:	f000 fc58 	bl	8001000 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000750:	f000 fb0e 	bl	8000d70 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000754:	f000 fb5a 	bl	8000e0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000758:	f000 fba6 	bl	8000ea8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &car, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	4906      	ldr	r1, [pc, #24]	@ (8000778 <main+0x40>)
 8000760:	4806      	ldr	r0, [pc, #24]	@ (800077c <main+0x44>)
 8000762:	f002 ffba 	bl	80036da <HAL_UART_Receive_IT>
  memset(buffer, 0, 100);
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <main+0x48>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2264      	movs	r2, #100	@ 0x64
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 f9c6 	bl	8004b00 <memset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <main+0x3c>
 8000778:	20000030 	.word	0x20000030
 800077c:	20000130 	.word	0x20000130
 8000780:	20000034 	.word	0x20000034

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b094      	sub	sp, #80	@ 0x50
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	2230      	movs	r2, #48	@ 0x30
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f004 f9b4 	bl	8004b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	f107 030c 	add.w	r3, r7, #12
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <SystemClock_Config+0xb0>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ac:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <SystemClock_Config+0xb0>)
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <SystemClock_Config+0xb0>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <SystemClock_Config+0xb4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <SystemClock_Config+0xb4>)
 80007ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <SystemClock_Config+0xb4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 f937 	bl	8001a64 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007fc:	f000 fa1c 	bl	8000c38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fbc6 	bl	8001fac <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000826:	f000 fa07 	bl	8000c38 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	@ 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a9f      	ldr	r2, [pc, #636]	@ (8000ac8 <HAL_UART_RxCpltCallback+0x28c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	f040 8137 	bne.w	8000abe <HAL_UART_RxCpltCallback+0x282>
	{
		if (car == '\0'){
 8000850:	4b9e      	ldr	r3, [pc, #632]	@ (8000acc <HAL_UART_RxCpltCallback+0x290>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	f040 8120 	bne.w	8000a9a <HAL_UART_RxCpltCallback+0x25e>
			if(strcmp(buffer, "LED1 ON") == 0 && isChenillardOn == 0){
 800085a:	4b9d      	ldr	r3, [pc, #628]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	499d      	ldr	r1, [pc, #628]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x298>)
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcd1 	bl	8000208 <strcmp>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <HAL_UART_RxCpltCallback+0x44>
 800086c:	4b9a      	ldr	r3, [pc, #616]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <HAL_UART_RxCpltCallback+0x44>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4898      	ldr	r0, [pc, #608]	@ (8000adc <HAL_UART_RxCpltCallback+0x2a0>)
 800087a:	f001 f8a7 	bl	80019cc <HAL_GPIO_WritePin>
 800087e:	e101      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "LED1 OFF") == 0 && isChenillardOn == 0){
 8000880:	4b93      	ldr	r3, [pc, #588]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4996      	ldr	r1, [pc, #600]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x2a4>)
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fcbe 	bl	8000208 <strcmp>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d109      	bne.n	80008a6 <HAL_UART_RxCpltCallback+0x6a>
 8000892:	4b91      	ldr	r3, [pc, #580]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d105      	bne.n	80008a6 <HAL_UART_RxCpltCallback+0x6a>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2101      	movs	r1, #1
 800089e:	488f      	ldr	r0, [pc, #572]	@ (8000adc <HAL_UART_RxCpltCallback+0x2a0>)
 80008a0:	f001 f894 	bl	80019cc <HAL_GPIO_WritePin>
 80008a4:	e0ee      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "LED2 ON") == 0 && isChenillardOn == 0){
 80008a6:	4b8a      	ldr	r3, [pc, #552]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	498e      	ldr	r1, [pc, #568]	@ (8000ae4 <HAL_UART_RxCpltCallback+0x2a8>)
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fcab 	bl	8000208 <strcmp>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d109      	bne.n	80008cc <HAL_UART_RxCpltCallback+0x90>
 80008b8:	4b87      	ldr	r3, [pc, #540]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d105      	bne.n	80008cc <HAL_UART_RxCpltCallback+0x90>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2180      	movs	r1, #128	@ 0x80
 80008c4:	4885      	ldr	r0, [pc, #532]	@ (8000adc <HAL_UART_RxCpltCallback+0x2a0>)
 80008c6:	f001 f881 	bl	80019cc <HAL_GPIO_WritePin>
 80008ca:	e0db      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "LED2 OFF") == 0 && isChenillardOn == 0){
 80008cc:	4b80      	ldr	r3, [pc, #512]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4985      	ldr	r1, [pc, #532]	@ (8000ae8 <HAL_UART_RxCpltCallback+0x2ac>)
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fc98 	bl	8000208 <strcmp>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d109      	bne.n	80008f2 <HAL_UART_RxCpltCallback+0xb6>
 80008de:	4b7e      	ldr	r3, [pc, #504]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d105      	bne.n	80008f2 <HAL_UART_RxCpltCallback+0xb6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2180      	movs	r1, #128	@ 0x80
 80008ea:	487c      	ldr	r0, [pc, #496]	@ (8000adc <HAL_UART_RxCpltCallback+0x2a0>)
 80008ec:	f001 f86e 	bl	80019cc <HAL_GPIO_WritePin>
 80008f0:	e0c8      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "LED3 ON") == 0 && isChenillardOn == 0){
 80008f2:	4b77      	ldr	r3, [pc, #476]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	497d      	ldr	r1, [pc, #500]	@ (8000aec <HAL_UART_RxCpltCallback+0x2b0>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc85 	bl	8000208 <strcmp>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d10a      	bne.n	800091a <HAL_UART_RxCpltCallback+0xde>
 8000904:	4b74      	ldr	r3, [pc, #464]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d106      	bne.n	800091a <HAL_UART_RxCpltCallback+0xde>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000912:	4872      	ldr	r0, [pc, #456]	@ (8000adc <HAL_UART_RxCpltCallback+0x2a0>)
 8000914:	f001 f85a 	bl	80019cc <HAL_GPIO_WritePin>
 8000918:	e0b4      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "LED3 OFF") == 0 && isChenillardOn == 0){
 800091a:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4974      	ldr	r1, [pc, #464]	@ (8000af0 <HAL_UART_RxCpltCallback+0x2b4>)
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fc71 	bl	8000208 <strcmp>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10a      	bne.n	8000942 <HAL_UART_RxCpltCallback+0x106>
 800092c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d106      	bne.n	8000942 <HAL_UART_RxCpltCallback+0x106>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800093a:	4868      	ldr	r0, [pc, #416]	@ (8000adc <HAL_UART_RxCpltCallback+0x2a0>)
 800093c:	f001 f846 	bl	80019cc <HAL_GPIO_WritePin>
 8000940:	e0a0      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "CHENILLARD1 ON") == 0){
 8000942:	4b63      	ldr	r3, [pc, #396]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	496b      	ldr	r1, [pc, #428]	@ (8000af4 <HAL_UART_RxCpltCallback+0x2b8>)
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fc5d 	bl	8000208 <strcmp>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10b      	bne.n	800096c <HAL_UART_RxCpltCallback+0x130>
				  chenillard = 1;
 8000954:	4b68      	ldr	r3, [pc, #416]	@ (8000af8 <HAL_UART_RxCpltCallback+0x2bc>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(timer);
 800095a:	4b68      	ldr	r3, [pc, #416]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f002 f952 	bl	8002c08 <HAL_TIM_Base_Start_IT>
				  isChenillardOn = 1;
 8000964:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 8000966:	2201      	movs	r2, #1
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e08b      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "CHENILLARD2 ON") == 0){
 800096c:	4b58      	ldr	r3, [pc, #352]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4963      	ldr	r1, [pc, #396]	@ (8000b00 <HAL_UART_RxCpltCallback+0x2c4>)
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fc48 	bl	8000208 <strcmp>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d10b      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x15a>
				  chenillard = 2;
 800097e:	4b5e      	ldr	r3, [pc, #376]	@ (8000af8 <HAL_UART_RxCpltCallback+0x2bc>)
 8000980:	2202      	movs	r2, #2
 8000982:	601a      	str	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(timer);
 8000984:	4b5d      	ldr	r3, [pc, #372]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f002 f93d 	bl	8002c08 <HAL_TIM_Base_Start_IT>
				  isChenillardOn = 1;
 800098e:	4b52      	ldr	r3, [pc, #328]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	e076      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "CHENILLARD3 ON") == 0){
 8000996:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	495a      	ldr	r1, [pc, #360]	@ (8000b04 <HAL_UART_RxCpltCallback+0x2c8>)
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc33 	bl	8000208 <strcmp>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d10b      	bne.n	80009c0 <HAL_UART_RxCpltCallback+0x184>
				  chenillard = 3;
 80009a8:	4b53      	ldr	r3, [pc, #332]	@ (8000af8 <HAL_UART_RxCpltCallback+0x2bc>)
 80009aa:	2203      	movs	r2, #3
 80009ac:	601a      	str	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(timer);
 80009ae:	4b53      	ldr	r3, [pc, #332]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 f928 	bl	8002c08 <HAL_TIM_Base_Start_IT>
				  isChenillardOn = 1;
 80009b8:	4b47      	ldr	r3, [pc, #284]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e061      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "CHENILLARD1 OFF") == 0 || strcmp(buffer, "CHENILLARD2 OFF") == 0 || strcmp(buffer, "CHENILLARD3 OFF") == 0){
 80009c0:	4b43      	ldr	r3, [pc, #268]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4950      	ldr	r1, [pc, #320]	@ (8000b08 <HAL_UART_RxCpltCallback+0x2cc>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fc1e 	bl	8000208 <strcmp>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d011      	beq.n	80009f6 <HAL_UART_RxCpltCallback+0x1ba>
 80009d2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	494d      	ldr	r1, [pc, #308]	@ (8000b0c <HAL_UART_RxCpltCallback+0x2d0>)
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fc15 	bl	8000208 <strcmp>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d008      	beq.n	80009f6 <HAL_UART_RxCpltCallback+0x1ba>
 80009e4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4949      	ldr	r1, [pc, #292]	@ (8000b10 <HAL_UART_RxCpltCallback+0x2d4>)
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fc0c 	bl	8000208 <strcmp>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10b      	bne.n	8000a0e <HAL_UART_RxCpltCallback+0x1d2>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7 | GPIO_PIN_14, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009fc:	4837      	ldr	r0, [pc, #220]	@ (8000adc <HAL_UART_RxCpltCallback+0x2a0>)
 80009fe:	f000 ffe5 	bl	80019cc <HAL_GPIO_WritePin>
				  stopTimers();
 8000a02:	f7ff fe85 	bl	8000710 <stopTimers>
				  isChenillardOn = 0;
 8000a06:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x29c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e03a      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "CHENILLARD FREQUENCE1") == 0){
 8000a0e:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4940      	ldr	r1, [pc, #256]	@ (8000b14 <HAL_UART_RxCpltCallback+0x2d8>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fbf7 	bl	8000208 <strcmp>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10a      	bne.n	8000a36 <HAL_UART_RxCpltCallback+0x1fa>
				  stopTimers();
 8000a20:	f7ff fe76 	bl	8000710 <stopTimers>
				  timer = &htim2;
 8000a24:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 8000a26:	4a3c      	ldr	r2, [pc, #240]	@ (8000b18 <HAL_UART_RxCpltCallback+0x2dc>)
 8000a28:	601a      	str	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(timer);
 8000a2a:	4b34      	ldr	r3, [pc, #208]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 f8ea 	bl	8002c08 <HAL_TIM_Base_Start_IT>
 8000a34:	e026      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "CHENILLARD FREQUENCE2") == 0){
 8000a36:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4938      	ldr	r1, [pc, #224]	@ (8000b1c <HAL_UART_RxCpltCallback+0x2e0>)
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fbe3 	bl	8000208 <strcmp>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10a      	bne.n	8000a5e <HAL_UART_RxCpltCallback+0x222>
				  stopTimers();
 8000a48:	f7ff fe62 	bl	8000710 <stopTimers>
				  timer = &htim3;
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 8000a4e:	4a34      	ldr	r2, [pc, #208]	@ (8000b20 <HAL_UART_RxCpltCallback+0x2e4>)
 8000a50:	601a      	str	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(timer);
 8000a52:	4b2a      	ldr	r3, [pc, #168]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 f8d6 	bl	8002c08 <HAL_TIM_Base_Start_IT>
 8000a5c:	e012      	b.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
			}
			else if(strcmp(buffer, "CHENILLARD FREQUENCE3") == 0){
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4930      	ldr	r1, [pc, #192]	@ (8000b24 <HAL_UART_RxCpltCallback+0x2e8>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fbcf 	bl	8000208 <strcmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d109      	bne.n	8000a84 <HAL_UART_RxCpltCallback+0x248>
				  stopTimers();
 8000a70:	f7ff fe4e 	bl	8000710 <stopTimers>
				  timer = &htim4;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 8000a76:	4a2c      	ldr	r2, [pc, #176]	@ (8000b28 <HAL_UART_RxCpltCallback+0x2ec>)
 8000a78:	601a      	str	r2, [r3, #0]
				  HAL_TIM_Base_Start_IT(timer);
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <HAL_UART_RxCpltCallback+0x2c0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 f8c2 	bl	8002c08 <HAL_TIM_Base_Start_IT>
			}
			memset(buffer, 0, 100);
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2264      	movs	r2, #100	@ 0x64
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 f837 	bl	8004b00 <memset>
			buffer_idx = 0;
 8000a92:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <HAL_UART_RxCpltCallback+0x2f0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e00c      	b.n	8000ab4 <HAL_UART_RxCpltCallback+0x278>
		}
		else {
			buffer[buffer_idx] = car;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x294>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <HAL_UART_RxCpltCallback+0x2f0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <HAL_UART_RxCpltCallback+0x290>)
 8000aa6:	7812      	ldrb	r2, [r2, #0]
 8000aa8:	701a      	strb	r2, [r3, #0]
			buffer_idx++;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <HAL_UART_RxCpltCallback+0x2f0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b2c <HAL_UART_RxCpltCallback+0x2f0>)
 8000ab2:	6013      	str	r3, [r2, #0]
		}
		HAL_UART_Receive_IT(&huart3, &car, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	4905      	ldr	r1, [pc, #20]	@ (8000acc <HAL_UART_RxCpltCallback+0x290>)
 8000ab8:	481d      	ldr	r0, [pc, #116]	@ (8000b30 <HAL_UART_RxCpltCallback+0x2f4>)
 8000aba:	f002 fe0e 	bl	80036da <HAL_UART_Receive_IT>
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40004800 	.word	0x40004800
 8000acc:	20000030 	.word	0x20000030
 8000ad0:	20000034 	.word	0x20000034
 8000ad4:	08004b70 	.word	0x08004b70
 8000ad8:	20000048 	.word	0x20000048
 8000adc:	40020400 	.word	0x40020400
 8000ae0:	08004b78 	.word	0x08004b78
 8000ae4:	08004b84 	.word	0x08004b84
 8000ae8:	08004b8c 	.word	0x08004b8c
 8000aec:	08004b98 	.word	0x08004b98
 8000af0:	08004ba0 	.word	0x08004ba0
 8000af4:	08004bac 	.word	0x08004bac
 8000af8:	2000003c 	.word	0x2000003c
 8000afc:	20000000 	.word	0x20000000
 8000b00:	08004bbc 	.word	0x08004bbc
 8000b04:	08004bcc 	.word	0x08004bcc
 8000b08:	08004bdc 	.word	0x08004bdc
 8000b0c:	08004bec 	.word	0x08004bec
 8000b10:	08004bfc 	.word	0x08004bfc
 8000b14:	08004c0c 	.word	0x08004c0c
 8000b18:	2000004c 	.word	0x2000004c
 8000b1c:	08004c24 	.word	0x08004c24
 8000b20:	20000098 	.word	0x20000098
 8000b24:	08004c3c 	.word	0x08004c3c
 8000b28:	200000e4 	.word	0x200000e4
 8000b2c:	20000038 	.word	0x20000038
 8000b30:	20000130 	.word	0x20000130

08000b34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2 || htim->Instance == TIM3 || htim->Instance == TIM4)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b44:	d009      	beq.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x26>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d004      	beq.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x26>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a15      	ldr	r2, [pc, #84]	@ (8000bac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d122      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x6c>
	{
		if (chenillard == 1){
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d102      	bne.n	8000b68 <HAL_TIM_PeriodElapsedCallback+0x34>
			chenillard1();
 8000b62:	f7ff fd55 	bl	8000610 <chenillard1>
				chenillard3State = 0;
			}

		}
	}
}
 8000b66:	e01b      	b.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x6c>
		else if (chenillard == 2){
 8000b68:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d102      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x42>
			chenillard2();
 8000b70:	f7ff fd8e 	bl	8000690 <chenillard2>
}
 8000b74:	e014      	b.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x6c>
		else if (chenillard == 3){
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d110      	bne.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x6c>
			if (chenillard3State == 0){
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d106      	bne.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0x60>
				chenillard3(GPIO_PIN_RESET);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fdb0 	bl	80006ec <chenillard3>
				chenillard3State = 1;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
}
 8000b92:	e005      	b.n	8000ba0 <HAL_TIM_PeriodElapsedCallback+0x6c>
				chenillard3(GPIO_PIN_SET);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fda9 	bl	80006ec <chenillard3>
				chenillard3State = 0;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	40000800 	.word	0x40000800
 8000bb0:	2000003c 	.word	0x2000003c
 8000bb4:	20000040 	.word	0x20000040

08000bb8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(&huart3, (uint8_t *)"Hello world!", strlen("Hello world!"), 100);
 8000bc2:	2364      	movs	r3, #100	@ 0x64
 8000bc4:	220c      	movs	r2, #12
 8000bc6:	4904      	ldr	r1, [pc, #16]	@ (8000bd8 <HAL_GPIO_EXTI_Callback+0x20>)
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <HAL_GPIO_EXTI_Callback+0x24>)
 8000bca:	f002 fcfd 	bl	80035c8 <HAL_UART_Transmit>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08004c54 	.word	0x08004c54
 8000bdc:	20000130 	.word	0x20000130

08000be0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000be6:	463b      	mov	r3, r7
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bf2:	f000 fc35 	bl	8001460 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c02:	231f      	movs	r3, #31
 8000c04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c06:	2387      	movs	r3, #135	@ 0x87
 8000c08:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c16:	2301      	movs	r3, #1
 8000c18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c22:	463b      	mov	r3, r7
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fc53 	bl	80014d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c2a:	2004      	movs	r0, #4
 8000c2c:	f000 fc30 	bl	8001490 <HAL_MPU_Enable>

}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c3c:	b672      	cpsid	i
}
 8000c3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <Error_Handler+0x8>

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a08      	ldr	r2, [pc, #32]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_MspInit+0x44>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 fa8b 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	@ (8000cfc <TIM2_IRQHandler+0x10>)
 8000cf2:	f002 f830 	bl	8002d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000004c 	.word	0x2000004c

08000d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d04:	4802      	ldr	r0, [pc, #8]	@ (8000d10 <TIM3_IRQHandler+0x10>)
 8000d06:	f002 f826 	bl	8002d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000098 	.word	0x20000098

08000d14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d18:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <TIM4_IRQHandler+0x10>)
 8000d1a:	f002 f81c 	bl	8002d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200000e4 	.word	0x200000e4

08000d28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <USART3_IRQHandler+0x10>)
 8000d2e:	f002 fd19 	bl	8003764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000130 	.word	0x20000130

08000d3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 8000d40:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d44:	f000 fe76 	bl	8001a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000d90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000d98:	227f      	movs	r2, #127	@ 0x7f
 8000d9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 62499;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000da4:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000da8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db6:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000db8:	f001 fece 	bl	8002b58 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dc2:	f7ff ff39 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000dd4:	f002 f8c6 	bl	8002f64 <HAL_TIM_ConfigClockSource>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dde:	f7ff ff2b 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <MX_TIM2_Init+0x98>)
 8000df0:	f002 faf0 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dfa:	f7ff ff1d 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000004c 	.word	0x2000004c

08000e0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea4 <MX_TIM3_Init+0x98>)
 8000e2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 255;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e32:	22ff      	movs	r2, #255	@ 0xff
 8000e34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 62499;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e3e:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8000e42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e50:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e52:	f001 fe81 	bl	8002b58 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e5c:	f7ff feec 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	480c      	ldr	r0, [pc, #48]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e6e:	f002 f879 	bl	8002f64 <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e78:	f7ff fede 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_TIM3_Init+0x94>)
 8000e8a:	f002 faa3 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e94:	f7ff fed0 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000098 	.word	0x20000098
 8000ea4:	40000400 	.word	0x40000400

08000ea8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0310 	add.w	r3, r7, #16
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8000f44 <MX_TIM4_Init+0x9c>)
 8000eca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 735;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000ece:	f240 22df 	movw	r2, #735	@ 0x2df
 8000ed2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65216;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000edc:	f64f 62c0 	movw	r2, #65216	@ 0xfec0
 8000ee0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eee:	4814      	ldr	r0, [pc, #80]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000ef0:	f001 fe32 	bl	8002b58 <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000efa:	f7ff fe9d 	bl	8000c38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000f0c:	f002 f82a 	bl	8002f64 <HAL_TIM_ConfigClockSource>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000f16:	f7ff fe8f 	bl	8000c38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <MX_TIM4_Init+0x98>)
 8000f28:	f002 fa54 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000f32:	f7ff fe81 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3720      	adds	r7, #32
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200000e4 	.word	0x200000e4
 8000f44:	40000800 	.word	0x40000800

08000f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f58:	d114      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	4b26      	ldr	r3, [pc, #152]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f66:	4b23      	ldr	r3, [pc, #140]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	201c      	movs	r0, #28
 8000f78:	f000 fa3b 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f7c:	201c      	movs	r0, #28
 8000f7e:	f000 fa54 	bl	800142a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000f82:	e032      	b.n	8000fea <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff8 <HAL_TIM_Base_MspInit+0xb0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d114      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	4a18      	ldr	r2, [pc, #96]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201d      	movs	r0, #29
 8000fac:	f000 fa21 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fb0:	201d      	movs	r0, #29
 8000fb2:	f000 fa3a 	bl	800142a <HAL_NVIC_EnableIRQ>
}
 8000fb6:	e018      	b.n	8000fea <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <HAL_TIM_Base_MspInit+0xb4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d113      	bne.n	8000fea <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_TIM_Base_MspInit+0xac>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201e      	movs	r0, #30
 8000fe0:	f000 fa07 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fe4:	201e      	movs	r0, #30
 8000fe6:	f000 fa20 	bl	800142a <HAL_NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40000400 	.word	0x40000400
 8000ffc:	40000800 	.word	0x40000800

08001000 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 8001006:	4a15      	ldr	r2, [pc, #84]	@ (800105c <MX_USART3_UART_Init+0x5c>)
 8001008:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 800100c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001010:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0f      	ldr	r3, [pc, #60]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103c:	4b06      	ldr	r3, [pc, #24]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	@ (8001058 <MX_USART3_UART_Init+0x58>)
 8001044:	f002 fa72 	bl	800352c <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800104e:	f7ff fdf3 	bl	8000c38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000130 	.word	0x20000130
 800105c:	40004800 	.word	0x40004800

08001060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b0aa      	sub	sp, #168	@ 0xa8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2284      	movs	r2, #132	@ 0x84
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fd3d 	bl	8004b00 <memset>
  if(uartHandle->Instance==USART3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a26      	ldr	r2, [pc, #152]	@ (8001124 <HAL_UART_MspInit+0xc4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d144      	bne.n	800111a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001090:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001094:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001096:	2300      	movs	r3, #0
 8001098:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f96a 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010aa:	f7ff fdc5 	bl	8000c38 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <HAL_UART_MspInit+0xc8>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_UART_MspInit+0xc8>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <HAL_UART_MspInit+0xc8>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_UART_MspInit+0xc8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a17      	ldr	r2, [pc, #92]	@ (8001128 <HAL_UART_MspInit+0xc8>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_UART_MspInit+0xc8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f8:	2307      	movs	r3, #7
 80010fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001102:	4619      	mov	r1, r3
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <HAL_UART_MspInit+0xcc>)
 8001106:	f000 fab5 	bl	8001674 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2027      	movs	r0, #39	@ 0x27
 8001110:	f000 f96f 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001114:	2027      	movs	r0, #39	@ 0x27
 8001116:	f000 f988 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	37a8      	adds	r7, #168	@ 0xa8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40004800 	.word	0x40004800
 8001128:	40023800 	.word	0x40023800
 800112c:	40020c00 	.word	0x40020c00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001168 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001134:	f7ff fe0a 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	@ (800116c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	@ (800117c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800115e:	f003 fcd7 	bl	8004b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fae9 	bl	8000738 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001174:	08004c8c 	.word	0x08004c8c
  ldr r2, =_sbss
 8001178:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800117c:	200001bc 	.word	0x200001bc

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>

08001182 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001186:	2003      	movs	r0, #3
 8001188:	f000 f928 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118c:	200f      	movs	r0, #15
 800118e:	f000 f805 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001192:	f7ff fd57 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x54>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b12      	ldr	r3, [pc, #72]	@ (80011f4 <HAL_InitTick+0x58>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f943 	bl	8001446 <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00e      	b.n	80011e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d80a      	bhi.n	80011e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f90b 	bl	80013f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011dc:	4a06      	ldr	r2, [pc, #24]	@ (80011f8 <HAL_InitTick+0x5c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e000      	b.n	80011e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000010 	.word	0x20000010
 80011f8:	2000000c 	.word	0x2000000c

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000010 	.word	0x20000010
 8001220:	200001b8 	.word	0x200001b8

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200001b8 	.word	0x200001b8

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001266:	4313      	orrs	r3, r2
 8001268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126a:	4a04      	ldr	r2, [pc, #16]	@ (800127c <__NVIC_SetPriorityGrouping+0x40>)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	60d3      	str	r3, [r2, #12]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00
 8001280:	05fa0000 	.word	0x05fa0000

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	@ (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	@ (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	@ (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	@ (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	@ (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff29 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001404:	f7ff ff3e 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	6978      	ldr	r0, [r7, #20]
 8001410:	f7ff ff8e 	bl	8001330 <NVIC_EncodePriority>
 8001414:	4602      	mov	r2, r0
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	bf00      	nop
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff31 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffa2 	bl	8001398 <SysTick_Config>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001464:	f3bf 8f5f 	dmb	sy
}
 8001468:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <HAL_MPU_Disable+0x28>)
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	4a06      	ldr	r2, [pc, #24]	@ (8001488 <HAL_MPU_Disable+0x28>)
 8001470:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001474:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_MPU_Disable+0x2c>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00
 800148c:	e000ed90 	.word	0xe000ed90

08001490 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_MPU_Enable+0x38>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_MPU_Enable+0x3c>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a6:	4a09      	ldr	r2, [pc, #36]	@ (80014cc <HAL_MPU_Enable+0x3c>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014ae:	f3bf 8f4f 	dsb	sy
}
 80014b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014b4:	f3bf 8f6f 	isb	sy
}
 80014b8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed90 	.word	0xe000ed90
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785a      	ldrb	r2, [r3, #1]
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7b1b      	ldrb	r3, [r3, #12]
 80014f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7adb      	ldrb	r3, [r3, #11]
 80014fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001500:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7a9b      	ldrb	r3, [r3, #10]
 8001506:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001508:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7b5b      	ldrb	r3, [r3, #13]
 800150e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001510:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7b9b      	ldrb	r3, [r3, #14]
 8001516:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001518:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7bdb      	ldrb	r3, [r3, #15]
 800151e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001520:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7a5b      	ldrb	r3, [r3, #9]
 8001526:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7a1b      	ldrb	r3, [r3, #8]
 800152e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001530:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	7812      	ldrb	r2, [r2, #0]
 8001536:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800153a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800153c:	6113      	str	r3, [r2, #16]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed90 	.word	0xe000ed90

08001550 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800155e:	f7ff fe61 	bl	8001224 <HAL_GetTick>
 8001562:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d008      	beq.n	8001582 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2280      	movs	r2, #128	@ 0x80
 8001574:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e052      	b.n	8001628 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 0216 	bic.w	r2, r2, #22
 8001590:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d103      	bne.n	80015b2 <HAL_DMA_Abort+0x62>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d007      	beq.n	80015c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0208 	bic.w	r2, r2, #8
 80015c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0201 	bic.w	r2, r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d2:	e013      	b.n	80015fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015d4:	f7ff fe26 	bl	8001224 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d90c      	bls.n	80015fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e015      	b.n	8001628 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1e4      	bne.n	80015d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160e:	223f      	movs	r2, #63	@ 0x3f
 8001610:	409a      	lsls	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d004      	beq.n	800164e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2280      	movs	r2, #128	@ 0x80
 8001648:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00c      	b.n	8001668 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2205      	movs	r2, #5
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0201 	bic.w	r2, r2, #1
 8001664:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800167e:	2300      	movs	r3, #0
 8001680:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e175      	b.n	8001980 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8164 	bne.w	800197a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d005      	beq.n	80016ca <HAL_GPIO_Init+0x56>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d130      	bne.n	800172c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 0201 	and.w	r2, r3, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b03      	cmp	r3, #3
 8001736:	d017      	beq.n	8001768 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d123      	bne.n	80017bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	69b9      	ldr	r1, [r7, #24]
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0203 	and.w	r2, r3, #3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80be 	beq.w	800197a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b66      	ldr	r3, [pc, #408]	@ (8001998 <HAL_GPIO_Init+0x324>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a65      	ldr	r2, [pc, #404]	@ (8001998 <HAL_GPIO_Init+0x324>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b63      	ldr	r3, [pc, #396]	@ (8001998 <HAL_GPIO_Init+0x324>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001816:	4a61      	ldr	r2, [pc, #388]	@ (800199c <HAL_GPIO_Init+0x328>)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a58      	ldr	r2, [pc, #352]	@ (80019a0 <HAL_GPIO_Init+0x32c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d037      	beq.n	80018b2 <HAL_GPIO_Init+0x23e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a57      	ldr	r2, [pc, #348]	@ (80019a4 <HAL_GPIO_Init+0x330>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d031      	beq.n	80018ae <HAL_GPIO_Init+0x23a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a56      	ldr	r2, [pc, #344]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d02b      	beq.n	80018aa <HAL_GPIO_Init+0x236>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a55      	ldr	r2, [pc, #340]	@ (80019ac <HAL_GPIO_Init+0x338>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d025      	beq.n	80018a6 <HAL_GPIO_Init+0x232>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a54      	ldr	r2, [pc, #336]	@ (80019b0 <HAL_GPIO_Init+0x33c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01f      	beq.n	80018a2 <HAL_GPIO_Init+0x22e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a53      	ldr	r2, [pc, #332]	@ (80019b4 <HAL_GPIO_Init+0x340>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0x22a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a52      	ldr	r2, [pc, #328]	@ (80019b8 <HAL_GPIO_Init+0x344>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x226>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a51      	ldr	r2, [pc, #324]	@ (80019bc <HAL_GPIO_Init+0x348>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x222>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a50      	ldr	r2, [pc, #320]	@ (80019c0 <HAL_GPIO_Init+0x34c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x21e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4f      	ldr	r2, [pc, #316]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x21a>
 800188a:	2309      	movs	r3, #9
 800188c:	e012      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 800188e:	230a      	movs	r3, #10
 8001890:	e010      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 8001892:	2308      	movs	r3, #8
 8001894:	e00e      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 8001896:	2307      	movs	r3, #7
 8001898:	e00c      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 800189a:	2306      	movs	r3, #6
 800189c:	e00a      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 800189e:	2305      	movs	r3, #5
 80018a0:	e008      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 80018a2:	2304      	movs	r3, #4
 80018a4:	e006      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 80018a6:	2303      	movs	r3, #3
 80018a8:	e004      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 80018aa:	2302      	movs	r3, #2
 80018ac:	e002      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e000      	b.n	80018b4 <HAL_GPIO_Init+0x240>
 80018b2:	2300      	movs	r3, #0
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f002 0203 	and.w	r2, r2, #3
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	4093      	lsls	r3, r2
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018c4:	4935      	ldr	r1, [pc, #212]	@ (800199c <HAL_GPIO_Init+0x328>)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d2:	4b3d      	ldr	r3, [pc, #244]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018f6:	4a34      	ldr	r2, [pc, #208]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018fc:	4b32      	ldr	r3, [pc, #200]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001920:	4a29      	ldr	r2, [pc, #164]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001926:	4b28      	ldr	r3, [pc, #160]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800194a:	4a1f      	ldr	r2, [pc, #124]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001950:	4b1d      	ldr	r3, [pc, #116]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001974:	4a14      	ldr	r2, [pc, #80]	@ (80019c8 <HAL_GPIO_Init+0x354>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3301      	adds	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	2b0f      	cmp	r3, #15
 8001984:	f67f ae86 	bls.w	8001694 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40013800 	.word	0x40013800
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020800 	.word	0x40020800
 80019ac:	40020c00 	.word	0x40020c00
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40021400 	.word	0x40021400
 80019b8:	40021800 	.word	0x40021800
 80019bc:	40021c00 	.word	0x40021c00
 80019c0:	40022000 	.word	0x40022000
 80019c4:	40022400 	.word	0x40022400
 80019c8:	40013c00 	.word	0x40013c00

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019e8:	e003      	b.n	80019f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019ea:	887b      	ldrh	r3, [r7, #2]
 80019ec:	041a      	lsls	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b085      	sub	sp, #20
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	460b      	mov	r3, r1
 8001a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a10:	887a      	ldrh	r2, [r7, #2]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	041a      	lsls	r2, r3, #16
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	400b      	ands	r3, r1
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a3e:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8b0 	bl	8000bb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e291      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	4b96      	ldr	r3, [pc, #600]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a94:	4b93      	ldr	r3, [pc, #588]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x62>
 8001aa0:	4b90      	ldr	r3, [pc, #576]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4b8d      	ldr	r3, [pc, #564]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x130>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d168      	bne.n	8001b94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e26b      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x7a>
 8001ad0:	4b84      	ldr	r3, [pc, #528]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a83      	ldr	r2, [pc, #524]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e02e      	b.n	8001b3c <HAL_RCC_OscConfig+0xd8>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x9c>
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7e      	ldr	r2, [pc, #504]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xd8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xc0>
 8001b0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a72      	ldr	r2, [pc, #456]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd8>
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a6b      	ldr	r2, [pc, #428]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff fb6e 	bl	8001224 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fb6a 	bl	8001224 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e21f      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b61      	ldr	r3, [pc, #388]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe8>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fb5a 	bl	8001224 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fb56 	bl	8001224 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	@ 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e20b      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x110>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d069      	beq.n	8001c76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	4b50      	ldr	r3, [pc, #320]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x190>
 8001bba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x17a>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1df      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b41      	ldr	r3, [pc, #260]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	493d      	ldr	r1, [pc, #244]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e040      	b.n	8001c76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d023      	beq.n	8001c44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b39      	ldr	r3, [pc, #228]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a38      	ldr	r2, [pc, #224]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fb0c 	bl	8001224 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c10:	f7ff fb08 	bl	8001224 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1bd      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	4b30      	ldr	r3, [pc, #192]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4929      	ldr	r1, [pc, #164]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
 8001c42:	e018      	b.n	8001c76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c44:	4b27      	ldr	r3, [pc, #156]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c4a:	f023 0301 	bic.w	r3, r3, #1
 8001c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7ff fae8 	bl	8001224 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c58:	f7ff fae4 	bl	8001224 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e199      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d038      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d019      	beq.n	8001cbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff fac5 	bl	8001224 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fac1 	bl	8001224 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e176      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x23a>
 8001cbc:	e01a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff faab 	bl	8001224 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff faa7 	bl	8001224 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d903      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e15c      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
 8001ce4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4b91      	ldr	r3, [pc, #580]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a4 	beq.w	8001e4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d02:	4b8b      	ldr	r3, [pc, #556]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10d      	bne.n	8001d2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	4b88      	ldr	r3, [pc, #544]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	4a87      	ldr	r2, [pc, #540]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1a:	4b85      	ldr	r3, [pc, #532]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d26:	2301      	movs	r3, #1
 8001d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2a:	4b82      	ldr	r3, [pc, #520]	@ (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d118      	bne.n	8001d68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d36:	4b7f      	ldr	r3, [pc, #508]	@ (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fa6f 	bl	8001224 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff fa6b 	bl	8001224 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	@ 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e120      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5c:	4b75      	ldr	r3, [pc, #468]	@ (8001f34 <HAL_RCC_OscConfig+0x4d0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x31a>
 8001d70:	4b6f      	ldr	r3, [pc, #444]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d74:	4a6e      	ldr	r2, [pc, #440]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7c:	e02d      	b.n	8001dda <HAL_RCC_OscConfig+0x376>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x33c>
 8001d86:	4b6a      	ldr	r3, [pc, #424]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8a:	4a69      	ldr	r2, [pc, #420]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d92:	4b67      	ldr	r3, [pc, #412]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d96:	4a66      	ldr	r2, [pc, #408]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d9e:	e01c      	b.n	8001dda <HAL_RCC_OscConfig+0x376>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d10c      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x35e>
 8001da8:	4b61      	ldr	r3, [pc, #388]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dac:	4a60      	ldr	r2, [pc, #384]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc0:	e00b      	b.n	8001dda <HAL_RCC_OscConfig+0x376>
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dce:	4b58      	ldr	r3, [pc, #352]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd2:	4a57      	ldr	r2, [pc, #348]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d015      	beq.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa1f 	bl	8001224 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e00a      	b.n	8001e00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7ff fa1b 	bl	8001224 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e0ce      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	4b4b      	ldr	r3, [pc, #300]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ee      	beq.n	8001dea <HAL_RCC_OscConfig+0x386>
 8001e0c:	e014      	b.n	8001e38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fa09 	bl	8001224 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fa05 	bl	8001224 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0b8      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	4b40      	ldr	r3, [pc, #256]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1ee      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e38:	7dfb      	ldrb	r3, [r7, #23]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d105      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	4a3b      	ldr	r2, [pc, #236]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a4 	beq.w	8001f9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e54:	4b36      	ldr	r3, [pc, #216]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d06b      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d149      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a30      	ldr	r2, [pc, #192]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff f9d6 	bl	8001224 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f9d2 	bl	8001224 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e087      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	4b28      	ldr	r3, [pc, #160]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	019b      	lsls	r3, r3, #6
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	085b      	lsrs	r3, r3, #1
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	041b      	lsls	r3, r3, #16
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ec2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ec6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f9a6 	bl	8001224 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff f9a2 	bl	8001224 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e057      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x478>
 8001efa:	e04f      	b.n	8001f9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0b      	ldr	r2, [pc, #44]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff f98c 	bl	8001224 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f988 	bl	8001224 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e03d      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b03      	ldr	r3, [pc, #12]	@ (8001f30 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4ac>
 8001f2e:	e035      	b.n	8001f9c <HAL_RCC_OscConfig+0x538>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_RCC_OscConfig+0x544>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d028      	beq.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d121      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11a      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d111      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0d0      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 030f 	and.w	r3, r3, #15
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d910      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b67      	ldr	r3, [pc, #412]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 020f 	bic.w	r2, r3, #15
 8001fda:	4965      	ldr	r1, [pc, #404]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b63      	ldr	r3, [pc, #396]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e0b8      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800200c:	4b59      	ldr	r3, [pc, #356]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a58      	ldr	r2, [pc, #352]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002012:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002024:	4b53      	ldr	r3, [pc, #332]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a52      	ldr	r2, [pc, #328]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800202a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800202e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002030:	4b50      	ldr	r3, [pc, #320]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	494d      	ldr	r1, [pc, #308]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d040      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	4b47      	ldr	r3, [pc, #284]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e07f      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b41      	ldr	r3, [pc, #260]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e073      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3d      	ldr	r3, [pc, #244]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06b      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b39      	ldr	r3, [pc, #228]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4936      	ldr	r1, [pc, #216]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7ff f8c0 	bl	8001224 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff f8bc 	bl	8001224 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e053      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2d      	ldr	r3, [pc, #180]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d210      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4922      	ldr	r1, [pc, #136]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e032      	b.n	8002166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b19      	ldr	r3, [pc, #100]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4916      	ldr	r1, [pc, #88]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800212a:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	490e      	ldr	r1, [pc, #56]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213e:	f000 f821 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 8002142:	4602      	mov	r2, r0
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <HAL_RCC_ClockConfig+0x1c8>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	490a      	ldr	r1, [pc, #40]	@ (8002178 <HAL_RCC_ClockConfig+0x1cc>)
 8002150:	5ccb      	ldrb	r3, [r1, r3]
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	4a09      	ldr	r2, [pc, #36]	@ (800217c <HAL_RCC_ClockConfig+0x1d0>)
 8002158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_RCC_ClockConfig+0x1d4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff f81c 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00
 8002174:	40023800 	.word	0x40023800
 8002178:	08004c64 	.word	0x08004c64
 800217c:	20000008 	.word	0x20000008
 8002180:	2000000c 	.word	0x2000000c

08002184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002188:	b090      	sub	sp, #64	@ 0x40
 800218a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002190:	2300      	movs	r3, #0
 8002192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002194:	2300      	movs	r3, #0
 8002196:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800219c:	4b59      	ldr	r3, [pc, #356]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x180>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d00d      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x40>
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	f200 80a1 	bhi.w	80022f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x34>
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d003      	beq.n	80021be <HAL_RCC_GetSysClockFreq+0x3a>
 80021b6:	e09b      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b8:	4b53      	ldr	r3, [pc, #332]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021bc:	e09b      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HAL_RCC_GetSysClockFreq+0x188>)
 80021c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021c2:	e098      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d028      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021da:	4b4a      	ldr	r3, [pc, #296]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x180>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	2200      	movs	r2, #0
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021ec:	2100      	movs	r1, #0
 80021ee:	4b47      	ldr	r3, [pc, #284]	@ (800230c <HAL_RCC_GetSysClockFreq+0x188>)
 80021f0:	fb03 f201 	mul.w	r2, r3, r1
 80021f4:	2300      	movs	r3, #0
 80021f6:	fb00 f303 	mul.w	r3, r0, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	4a43      	ldr	r2, [pc, #268]	@ (800230c <HAL_RCC_GetSysClockFreq+0x188>)
 80021fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002204:	460a      	mov	r2, r1
 8002206:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800220a:	4413      	add	r3, r2
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800220e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002210:	2200      	movs	r2, #0
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	61fa      	str	r2, [r7, #28]
 8002216:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800221a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800221e:	f7fd fffd 	bl	800021c <__aeabi_uldivmod>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4613      	mov	r3, r2
 8002228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800222a:	e053      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222c:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x180>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	099b      	lsrs	r3, r3, #6
 8002232:	2200      	movs	r2, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	617a      	str	r2, [r7, #20]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800223e:	f04f 0b00 	mov.w	fp, #0
 8002242:	4652      	mov	r2, sl
 8002244:	465b      	mov	r3, fp
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0159      	lsls	r1, r3, #5
 8002250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002254:	0150      	lsls	r0, r2, #5
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	ebb2 080a 	subs.w	r8, r2, sl
 800225e:	eb63 090b 	sbc.w	r9, r3, fp
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800226e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002272:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002276:	ebb2 0408 	subs.w	r4, r2, r8
 800227a:	eb63 0509 	sbc.w	r5, r3, r9
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	00eb      	lsls	r3, r5, #3
 8002288:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800228c:	00e2      	lsls	r2, r4, #3
 800228e:	4614      	mov	r4, r2
 8002290:	461d      	mov	r5, r3
 8002292:	eb14 030a 	adds.w	r3, r4, sl
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	eb45 030b 	adc.w	r3, r5, fp
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022aa:	4629      	mov	r1, r5
 80022ac:	028b      	lsls	r3, r1, #10
 80022ae:	4621      	mov	r1, r4
 80022b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b4:	4621      	mov	r1, r4
 80022b6:	028a      	lsls	r2, r1, #10
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022be:	2200      	movs	r2, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	60fa      	str	r2, [r7, #12]
 80022c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c8:	f7fd ffa8 	bl	800021c <__aeabi_uldivmod>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4613      	mov	r3, r2
 80022d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	3301      	adds	r3, #1
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ee:	e002      	b.n	80022f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x184>)
 80022f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3740      	adds	r7, #64	@ 0x40
 80022fc:	46bd      	mov	sp, r7
 80022fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	00f42400 	.word	0x00f42400
 800230c:	017d7840 	.word	0x017d7840

08002310 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_RCC_GetHCLKFreq+0x14>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800232c:	f7ff fff0 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4903      	ldr	r1, [pc, #12]	@ (800234c <HAL_RCC_GetPCLK1Freq+0x24>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	08004c74 	.word	0x08004c74

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002354:	f7ff ffdc 	bl	8002310 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_RCC_GetPCLK2Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0b5b      	lsrs	r3, r3, #13
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	08004c74 	.word	0x08004c74

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d012      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023a0:	4b69      	ldr	r3, [pc, #420]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a68      	ldr	r2, [pc, #416]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80023aa:	6093      	str	r3, [r2, #8]
 80023ac:	4b66      	ldr	r3, [pc, #408]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b4:	4964      	ldr	r1, [pc, #400]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d017      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e0:	4959      	ldr	r1, [pc, #356]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023f0:	d101      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d017      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800240e:	4b4e      	ldr	r3, [pc, #312]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002414:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	494a      	ldr	r1, [pc, #296]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800242c:	d101      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800242e:	2301      	movs	r3, #1
 8002430:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800244a:	2301      	movs	r3, #1
 800244c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 808b 	beq.w	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800245c:	4b3a      	ldr	r3, [pc, #232]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002460:	4a39      	ldr	r2, [pc, #228]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002466:	6413      	str	r3, [r2, #64]	@ 0x40
 8002468:	4b37      	ldr	r3, [pc, #220]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002474:	4b35      	ldr	r3, [pc, #212]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a34      	ldr	r2, [pc, #208]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800247a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800247e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fed0 	bl	8001224 <HAL_GetTick>
 8002484:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002486:	e008      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002488:	f7fe fecc 	bl	8001224 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	@ 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e357      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800249a:	4b2c      	ldr	r3, [pc, #176]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f0      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024a6:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d035      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d02e      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024c4:	4b20      	ldr	r3, [pc, #128]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024cc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d2:	4a1d      	ldr	r2, [pc, #116]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024da:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	4a1a      	ldr	r2, [pc, #104]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024e6:	4a18      	ldr	r2, [pc, #96]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024ec:	4b16      	ldr	r3, [pc, #88]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d114      	bne.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fe94 	bl	8001224 <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fe90 	bl	8001224 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e319      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002516:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ee      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800252e:	d111      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800253c:	4b04      	ldr	r3, [pc, #16]	@ (8002550 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800253e:	400b      	ands	r3, r1
 8002540:	4901      	ldr	r1, [pc, #4]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
 8002546:	e00b      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002548:	40023800 	.word	0x40023800
 800254c:	40007000 	.word	0x40007000
 8002550:	0ffffcff 	.word	0x0ffffcff
 8002554:	4baa      	ldr	r3, [pc, #680]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4aa9      	ldr	r2, [pc, #676]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800255a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800255e:	6093      	str	r3, [r2, #8]
 8002560:	4ba7      	ldr	r3, [pc, #668]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002562:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	49a4      	ldr	r1, [pc, #656]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800256e:	4313      	orrs	r3, r2
 8002570:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800257e:	4ba0      	ldr	r3, [pc, #640]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002584:	4a9e      	ldr	r2, [pc, #632]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800258a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800258e:	4b9c      	ldr	r3, [pc, #624]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002590:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002598:	4999      	ldr	r1, [pc, #612]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025ac:	4b94      	ldr	r3, [pc, #592]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025ba:	4991      	ldr	r1, [pc, #580]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ce:	4b8c      	ldr	r3, [pc, #560]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025dc:	4988      	ldr	r1, [pc, #544]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025f0:	4b83      	ldr	r3, [pc, #524]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025fe:	4980      	ldr	r1, [pc, #512]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002612:	4b7b      	ldr	r3, [pc, #492]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002618:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002620:	4977      	ldr	r1, [pc, #476]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002634:	4b72      	ldr	r3, [pc, #456]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263a:	f023 0203 	bic.w	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	496f      	ldr	r1, [pc, #444]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002656:	4b6a      	ldr	r3, [pc, #424]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265c:	f023 020c 	bic.w	r2, r3, #12
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002664:	4966      	ldr	r1, [pc, #408]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002678:	4b61      	ldr	r3, [pc, #388]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002686:	495e      	ldr	r1, [pc, #376]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800269a:	4b59      	ldr	r3, [pc, #356]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a8:	4955      	ldr	r1, [pc, #340]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026bc:	4b50      	ldr	r3, [pc, #320]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	494d      	ldr	r1, [pc, #308]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026de:	4b48      	ldr	r3, [pc, #288]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ec:	4944      	ldr	r1, [pc, #272]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002700:	4b3f      	ldr	r3, [pc, #252]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002706:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	493c      	ldr	r1, [pc, #240]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002722:	4b37      	ldr	r3, [pc, #220]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002728:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002730:	4933      	ldr	r1, [pc, #204]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002744:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002752:	492b      	ldr	r1, [pc, #172]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d011      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002766:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002774:	4922      	ldr	r1, [pc, #136]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002780:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002784:	d101      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002786:	2301      	movs	r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027a6:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ac:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b4:	4912      	ldr	r1, [pc, #72]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d8:	4909      	ldr	r1, [pc, #36]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d006      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 80d9 	beq.w	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027f4:	4b02      	ldr	r3, [pc, #8]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a01      	ldr	r2, [pc, #4]	@ (8002800 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027fe:	e001      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002800:	40023800 	.word	0x40023800
 8002804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002806:	f7fe fd0d 	bl	8001224 <HAL_GetTick>
 800280a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800280e:	f7fe fd09 	bl	8001224 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b64      	cmp	r3, #100	@ 0x64
 800281a:	d901      	bls.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e194      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002820:	4b6c      	ldr	r3, [pc, #432]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d021      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11d      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002840:	4b64      	ldr	r3, [pc, #400]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002846:	0c1b      	lsrs	r3, r3, #16
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800284e:	4b61      	ldr	r3, [pc, #388]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002854:	0e1b      	lsrs	r3, r3, #24
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	019a      	lsls	r2, r3, #6
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	061b      	lsls	r3, r3, #24
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	071b      	lsls	r3, r3, #28
 8002874:	4957      	ldr	r1, [pc, #348]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800289a:	2b00      	cmp	r3, #0
 800289c:	d02e      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028a6:	d129      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028a8:	4b4a      	ldr	r3, [pc, #296]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	f003 0303 	and.w	r3, r3, #3
 80028b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028b6:	4b47      	ldr	r3, [pc, #284]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028bc:	0f1b      	lsrs	r3, r3, #28
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	019a      	lsls	r2, r3, #6
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	071b      	lsls	r3, r3, #28
 80028dc:	493d      	ldr	r1, [pc, #244]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80028e4:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ea:	f023 021f 	bic.w	r2, r3, #31
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	3b01      	subs	r3, #1
 80028f4:	4937      	ldr	r1, [pc, #220]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01d      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002908:	4b32      	ldr	r3, [pc, #200]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290e:	0e1b      	lsrs	r3, r3, #24
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002916:	4b2f      	ldr	r3, [pc, #188]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800291c:	0f1b      	lsrs	r3, r3, #28
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	019a      	lsls	r2, r3, #6
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	431a      	orrs	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	431a      	orrs	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	071b      	lsls	r3, r3, #28
 800293c:	4925      	ldr	r1, [pc, #148]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d011      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	019a      	lsls	r2, r3, #6
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	061b      	lsls	r3, r3, #24
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	071b      	lsls	r3, r3, #28
 800296c:	4919      	ldr	r1, [pc, #100]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002974:	4b17      	ldr	r3, [pc, #92]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a16      	ldr	r2, [pc, #88]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800297a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800297e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7fe fc50 	bl	8001224 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002988:	f7fe fc4c 	bl	8001224 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e0d7      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800299a:	4b0e      	ldr	r3, [pc, #56]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 80cd 	bne.w	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a08      	ldr	r2, [pc, #32]	@ (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ba:	f7fe fc33 	bl	8001224 <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029c2:	f7fe fc2f 	bl	8001224 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b64      	cmp	r3, #100	@ 0x64
 80029ce:	d903      	bls.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e0ba      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80029d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029e4:	d0ed      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d009      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d02e      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d12a      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a0e:	4b51      	ldr	r3, [pc, #324]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a22:	0f1b      	lsrs	r3, r3, #28
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	431a      	orrs	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	061b      	lsls	r3, r3, #24
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4944      	ldr	r1, [pc, #272]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a4a:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a50:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	021b      	lsls	r3, r3, #8
 8002a5c:	493d      	ldr	r1, [pc, #244]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d022      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a78:	d11d      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a7a:	4b36      	ldr	r3, [pc, #216]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a80:	0e1b      	lsrs	r3, r3, #24
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a88:	4b32      	ldr	r3, [pc, #200]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	0f1b      	lsrs	r3, r3, #28
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	019a      	lsls	r2, r3, #6
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	061b      	lsls	r3, r3, #24
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	071b      	lsls	r3, r3, #28
 8002aae:	4929      	ldr	r1, [pc, #164]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d028      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ac2:	4b24      	ldr	r3, [pc, #144]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac8:	0e1b      	lsrs	r3, r3, #24
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ad0:	4b20      	ldr	r3, [pc, #128]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	019a      	lsls	r2, r3, #6
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	041b      	lsls	r3, r3, #16
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	061b      	lsls	r3, r3, #24
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	071b      	lsls	r3, r3, #28
 8002af6:	4917      	ldr	r1, [pc, #92]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	4911      	ldr	r1, [pc, #68]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b14:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b20:	f7fe fb80 	bl	8001224 <HAL_GetTick>
 8002b24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b28:	f7fe fb7c 	bl	8001224 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e007      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b46:	d1ef      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800

08002b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e049      	b.n	8002bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe f9e2 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 fad6 	bl	8003148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d001      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e054      	b.n	8002cca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	@ (8002cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d022      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c4a:	d01d      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a22      	ldr	r2, [pc, #136]	@ (8002cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d018      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00e      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce8 <HAL_TIM_Base_Start_IT+0xe0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1c      	ldr	r2, [pc, #112]	@ (8002cec <HAL_TIM_Base_Start_IT+0xe4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d004      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x80>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf0 <HAL_TIM_Base_Start_IT+0xe8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d115      	bne.n	8002cb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_TIM_Base_Start_IT+0xec>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d015      	beq.n	8002cc6 <HAL_TIM_Base_Start_IT+0xbe>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca0:	d011      	beq.n	8002cc6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0201 	orr.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb2:	e008      	b.n	8002cc6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e000      	b.n	8002cc8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	40000800 	.word	0x40000800
 8002ce4:	40000c00 	.word	0x40000c00
 8002ce8:	40010400 	.word	0x40010400
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40001800 	.word	0x40001800
 8002cf4:	00010007 	.word	0x00010007

08002cf8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0201 	bic.w	r2, r2, #1
 8002d0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a1a      	ldr	r2, [r3, #32]
 8002d16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10f      	bne.n	8002d40 <HAL_TIM_Base_Stop_IT+0x48>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a1a      	ldr	r2, [r3, #32]
 8002d26:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_TIM_Base_Stop_IT+0x48>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b084      	sub	sp, #16
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01b      	beq.n	8002dba <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f06f 0202 	mvn.w	r2, #2
 8002d8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f9b3 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002da6:	e005      	b.n	8002db4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f9a5 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f9b6 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d020      	beq.n	8002e06 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01b      	beq.n	8002e06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f06f 0204 	mvn.w	r2, #4
 8002dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f98d 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002df2:	e005      	b.n	8002e00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f97f 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f990 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d020      	beq.n	8002e52 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01b      	beq.n	8002e52 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f06f 0208 	mvn.w	r2, #8
 8002e22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2204      	movs	r2, #4
 8002e28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d003      	beq.n	8002e40 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f967 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002e3e:	e005      	b.n	8002e4c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f959 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f96a 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d01b      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0210 	mvn.w	r2, #16
 8002e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2208      	movs	r2, #8
 8002e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f941 	bl	800310c <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e005      	b.n	8002e98 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f933 	bl	80030f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f944 	bl	8003120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00c      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0201 	mvn.w	r2, #1
 8002eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7fd fe39 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fb0a 	bl	8003504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fb02 	bl	8003518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8fe 	bl	8003134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d007      	beq.n	8002f5c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0220 	mvn.w	r2, #32
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 faca 	bl	80034f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3710      	adds	r7, #16
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <HAL_TIM_ConfigClockSource+0x1c>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	e0b4      	b.n	80030ea <HAL_TIM_ConfigClockSource+0x186>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	4b56      	ldr	r3, [pc, #344]	@ (80030f4 <HAL_TIM_ConfigClockSource+0x190>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fb8:	d03e      	beq.n	8003038 <HAL_TIM_ConfigClockSource+0xd4>
 8002fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fbe:	f200 8087 	bhi.w	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fc6:	f000 8086 	beq.w	80030d6 <HAL_TIM_ConfigClockSource+0x172>
 8002fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fce:	d87f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd0:	2b70      	cmp	r3, #112	@ 0x70
 8002fd2:	d01a      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xa6>
 8002fd4:	2b70      	cmp	r3, #112	@ 0x70
 8002fd6:	d87b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fd8:	2b60      	cmp	r3, #96	@ 0x60
 8002fda:	d050      	beq.n	800307e <HAL_TIM_ConfigClockSource+0x11a>
 8002fdc:	2b60      	cmp	r3, #96	@ 0x60
 8002fde:	d877      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe0:	2b50      	cmp	r3, #80	@ 0x50
 8002fe2:	d03c      	beq.n	800305e <HAL_TIM_ConfigClockSource+0xfa>
 8002fe4:	2b50      	cmp	r3, #80	@ 0x50
 8002fe6:	d873      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d058      	beq.n	800309e <HAL_TIM_ConfigClockSource+0x13a>
 8002fec:	2b40      	cmp	r3, #64	@ 0x40
 8002fee:	d86f      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff0:	2b30      	cmp	r3, #48	@ 0x30
 8002ff2:	d064      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ff4:	2b30      	cmp	r3, #48	@ 0x30
 8002ff6:	d86b      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	d060      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d867      	bhi.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d05c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003004:	2b10      	cmp	r3, #16
 8003006:	d05a      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x15a>
 8003008:	e062      	b.n	80030d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800301a:	f000 f9bb 	bl	8003394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800302c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	609a      	str	r2, [r3, #8]
      break;
 8003036:	e04f      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003048:	f000 f9a4 	bl	8003394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800305a:	609a      	str	r2, [r3, #8]
      break;
 800305c:	e03c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800306a:	461a      	mov	r2, r3
 800306c:	f000 f918 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2150      	movs	r1, #80	@ 0x50
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f971 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 800307c:	e02c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800308a:	461a      	mov	r2, r3
 800308c:	f000 f937 	bl	80032fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2160      	movs	r1, #96	@ 0x60
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f961 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 800309c:	e01c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 f8f8 	bl	80032a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2140      	movs	r1, #64	@ 0x40
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 f951 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 80030bc:	e00c      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 f948 	bl	800335e <TIM_ITRx_SetConfig>
      break;
 80030ce:	e003      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      break;
 80030d4:	e000      	b.n	80030d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80030d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	fffeff88 	.word	0xfffeff88

080030f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a46      	ldr	r2, [pc, #280]	@ (8003274 <TIM_Base_SetConfig+0x12c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003166:	d00f      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a43      	ldr	r2, [pc, #268]	@ (8003278 <TIM_Base_SetConfig+0x130>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00b      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a42      	ldr	r2, [pc, #264]	@ (800327c <TIM_Base_SetConfig+0x134>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d007      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a41      	ldr	r2, [pc, #260]	@ (8003280 <TIM_Base_SetConfig+0x138>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0x40>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a40      	ldr	r2, [pc, #256]	@ (8003284 <TIM_Base_SetConfig+0x13c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d108      	bne.n	800319a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800318e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a35      	ldr	r2, [pc, #212]	@ (8003274 <TIM_Base_SetConfig+0x12c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a8:	d027      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a32      	ldr	r2, [pc, #200]	@ (8003278 <TIM_Base_SetConfig+0x130>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d023      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a31      	ldr	r2, [pc, #196]	@ (800327c <TIM_Base_SetConfig+0x134>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a30      	ldr	r2, [pc, #192]	@ (8003280 <TIM_Base_SetConfig+0x138>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003284 <TIM_Base_SetConfig+0x13c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d017      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003288 <TIM_Base_SetConfig+0x140>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a2d      	ldr	r2, [pc, #180]	@ (800328c <TIM_Base_SetConfig+0x144>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00f      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003290 <TIM_Base_SetConfig+0x148>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00b      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003294 <TIM_Base_SetConfig+0x14c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003298 <TIM_Base_SetConfig+0x150>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <TIM_Base_SetConfig+0xb2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a29      	ldr	r2, [pc, #164]	@ (800329c <TIM_Base_SetConfig+0x154>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d108      	bne.n	800320c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a10      	ldr	r2, [pc, #64]	@ (8003274 <TIM_Base_SetConfig+0x12c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d003      	beq.n	8003240 <TIM_Base_SetConfig+0xf8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a12      	ldr	r2, [pc, #72]	@ (8003284 <TIM_Base_SetConfig+0x13c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d103      	bne.n	8003248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d105      	bne.n	8003266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f023 0201 	bic.w	r2, r3, #1
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	611a      	str	r2, [r3, #16]
  }
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40010000 	.word	0x40010000
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	40010400 	.word	0x40010400
 8003288:	40014000 	.word	0x40014000
 800328c:	40014400 	.word	0x40014400
 8003290:	40014800 	.word	0x40014800
 8003294:	40001800 	.word	0x40001800
 8003298:	40001c00 	.word	0x40001c00
 800329c:	40002000 	.word	0x40002000

080032a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0201 	bic.w	r2, r3, #1
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f023 030a 	bic.w	r3, r3, #10
 80032dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	621a      	str	r2, [r3, #32]
}
 80032f2:	bf00      	nop
 80032f4:	371c      	adds	r7, #28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b087      	sub	sp, #28
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f023 0210 	bic.w	r2, r3, #16
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	031b      	lsls	r3, r3, #12
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800333a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	621a      	str	r2, [r3, #32]
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800335e:	b480      	push	{r7}
 8003360:	b085      	sub	sp, #20
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	f043 0307 	orr.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	021a      	lsls	r2, r3, #8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	4313      	orrs	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e06d      	b.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a30      	ldr	r2, [pc, #192]	@ (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d004      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003426:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003438:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a20      	ldr	r2, [pc, #128]	@ (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d022      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800345e:	d01d      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1d      	ldr	r2, [pc, #116]	@ (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d018      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1c      	ldr	r2, [pc, #112]	@ (80034e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d013      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1a      	ldr	r2, [pc, #104]	@ (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d009      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a16      	ldr	r2, [pc, #88]	@ (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a15      	ldr	r2, [pc, #84]	@ (80034ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d10c      	bne.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40010400 	.word	0x40010400
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800
 80034e4:	40000c00 	.word	0x40000c00
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40001800 	.word	0x40001800

080034f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e040      	b.n	80035c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fd86 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2224      	movs	r2, #36	@ 0x24
 8003558:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fe4c 	bl	8004210 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fbe5 	bl	8003d48 <UART_SetConfig>
 800357e:	4603      	mov	r3, r0
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e01b      	b.n	80035c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fecb 	bl	8004354 <UART_CheckIdleState>
 80035be:	4603      	mov	r3, r0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08a      	sub	sp, #40	@ 0x28
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d177      	bne.n	80036d0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d002      	beq.n	80035ec <HAL_UART_Transmit+0x24>
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e070      	b.n	80036d2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2221      	movs	r2, #33	@ 0x21
 80035fc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fe:	f7fd fe11 	bl	8001224 <HAL_GetTick>
 8003602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	88fa      	ldrh	r2, [r7, #6]
 8003608:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800361c:	d108      	bne.n	8003630 <HAL_UART_Transmit+0x68>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	e003      	b.n	8003638 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003638:	e02f      	b.n	800369a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2200      	movs	r2, #0
 8003642:	2180      	movs	r1, #128	@ 0x80
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fedc 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e03b      	b.n	80036d2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	461a      	mov	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3302      	adds	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e007      	b.n	8003688 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	781a      	ldrb	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	3301      	adds	r3, #1
 8003686:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1c9      	bne.n	800363a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2140      	movs	r1, #64	@ 0x40
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fea6 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e005      	b.n	80036d2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b08a      	sub	sp, #40	@ 0x28
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d132      	bne.n	8003758 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_UART_Receive_IT+0x24>
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e02b      	b.n	800375a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	613b      	str	r3, [r7, #16]
   return(result);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800372a:	627b      	str	r3, [r7, #36]	@ 0x24
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	623b      	str	r3, [r7, #32]
 8003736:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	69f9      	ldr	r1, [r7, #28]
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	61bb      	str	r3, [r7, #24]
   return(result);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e6      	bne.n	8003716 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003748:	88fb      	ldrh	r3, [r7, #6]
 800374a:	461a      	mov	r2, r3
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fec4 	bl	80044dc <UART_Start_Receive_IT>
 8003754:	4603      	mov	r3, r0
 8003756:	e000      	b.n	800375a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3728      	adds	r7, #40	@ 0x28
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b0ba      	sub	sp, #232	@ 0xe8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800378a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800378e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003792:	4013      	ands	r3, r2
 8003794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003798:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d115      	bne.n	80037cc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00f      	beq.n	80037cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8297 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
      }
      return;
 80037ca:	e291      	b.n	8003cf0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8117 	beq.w	8003a04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80037e6:	4b85      	ldr	r3, [pc, #532]	@ (80039fc <HAL_UART_IRQHandler+0x298>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 810a 	beq.w	8003a04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d011      	beq.n	8003820 <HAL_UART_IRQHandler+0xbc>
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003800:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2201      	movs	r2, #1
 800380e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003816:	f043 0201 	orr.w	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d011      	beq.n	8003850 <HAL_UART_IRQHandler+0xec>
 800382c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00b      	beq.n	8003850 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2202      	movs	r2, #2
 800383e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003846:	f043 0204 	orr.w	r2, r3, #4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d011      	beq.n	8003880 <HAL_UART_IRQHandler+0x11c>
 800385c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2204      	movs	r2, #4
 800386e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d017      	beq.n	80038bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800389c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00b      	beq.n	80038bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2208      	movs	r2, #8
 80038aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b2:	f043 0208 	orr.w	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d012      	beq.n	80038ee <HAL_UART_IRQHandler+0x18a>
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e4:	f043 0220 	orr.w	r2, r3, #32
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 81fd 	beq.w	8003cf4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003928:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003936:	2b40      	cmp	r3, #64	@ 0x40
 8003938:	d005      	beq.n	8003946 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800393a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800393e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d04f      	beq.n	80039e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fe8e 	bl	8004668 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003956:	2b40      	cmp	r3, #64	@ 0x40
 8003958:	d141      	bne.n	80039de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3308      	adds	r3, #8
 8003960:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003970:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003978:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3308      	adds	r3, #8
 8003982:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003986:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800398a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003992:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800399e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1d9      	bne.n	800395a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d013      	beq.n	80039d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039b2:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <HAL_UART_IRQHandler+0x29c>)
 80039b4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fd fe38 	bl	8001630 <HAL_DMA_Abort_IT>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039d0:	4610      	mov	r0, r2
 80039d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	e00f      	b.n	80039f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9a0 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e00b      	b.n	80039f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f99c 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e007      	b.n	80039f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f998 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80039f4:	e17e      	b.n	8003cf4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f6:	bf00      	nop
    return;
 80039f8:	e17c      	b.n	8003cf4 <HAL_UART_IRQHandler+0x590>
 80039fa:	bf00      	nop
 80039fc:	04000120 	.word	0x04000120
 8003a00:	08004731 	.word	0x08004731

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	f040 814c 	bne.w	8003ca6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8145 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 813e 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2210      	movs	r2, #16
 8003a30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3c:	2b40      	cmp	r3, #64	@ 0x40
 8003a3e:	f040 80b6 	bne.w	8003bae <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 8150 	beq.w	8003cf8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a62:	429a      	cmp	r2, r3
 8003a64:	f080 8148 	bcs.w	8003cf8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7c:	f000 8086 	beq.w	8003b8c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003aaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1da      	bne.n	8003a80 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ada:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003adc:	f023 0301 	bic.w	r3, r3, #1
 8003ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003aee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003af2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e1      	bne.n	8003aca <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e3      	bne.n	8003b06 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b5c:	f023 0310 	bic.w	r3, r3, #16
 8003b60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b76:	e841 2300 	strex	r3, r2, [r1]
 8003b7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1e4      	bne.n	8003b4c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd fce2 	bl	8001550 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2202      	movs	r2, #2
 8003b90:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8c2 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bac:	e0a4      	b.n	8003cf8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8096 	beq.w	8003cfc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8091 	beq.w	8003cfc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e4      	bne.n	8003bda <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c34:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e3      	bne.n	8003c10 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f023 0310 	bic.w	r3, r3, #16
 8003c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e4      	bne.n	8003c5c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f846 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ca4:	e02a      	b.n	8003cfc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01c      	beq.n	8003d00 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
    }
    return;
 8003cce:	e017      	b.n	8003d00 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d012      	beq.n	8003d02 <HAL_UART_IRQHandler+0x59e>
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00c      	beq.n	8003d02 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fd37 	bl	800475c <UART_EndTransmit_IT>
    return;
 8003cee:	e008      	b.n	8003d02 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cf0:	bf00      	nop
 8003cf2:	e006      	b.n	8003d02 <HAL_UART_IRQHandler+0x59e>
    return;
 8003cf4:	bf00      	nop
 8003cf6:	e004      	b.n	8003d02 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cf8:	bf00      	nop
 8003cfa:	e002      	b.n	8003d02 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_IRQHandler+0x59e>
    return;
 8003d00:	bf00      	nop
  }

}
 8003d02:	37e8      	adds	r7, #232	@ 0xe8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4ba6      	ldr	r3, [pc, #664]	@ (800400c <UART_SetConfig+0x2c4>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a94      	ldr	r2, [pc, #592]	@ (8004010 <UART_SetConfig+0x2c8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d120      	bne.n	8003e06 <UART_SetConfig+0xbe>
 8003dc4:	4b93      	ldr	r3, [pc, #588]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d816      	bhi.n	8003e00 <UART_SetConfig+0xb8>
 8003dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd8 <UART_SetConfig+0x90>)
 8003dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd8:	08003de9 	.word	0x08003de9
 8003ddc:	08003df5 	.word	0x08003df5
 8003de0:	08003def 	.word	0x08003def
 8003de4:	08003dfb 	.word	0x08003dfb
 8003de8:	2301      	movs	r3, #1
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e150      	b.n	8004090 <UART_SetConfig+0x348>
 8003dee:	2302      	movs	r3, #2
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e14d      	b.n	8004090 <UART_SetConfig+0x348>
 8003df4:	2304      	movs	r3, #4
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e14a      	b.n	8004090 <UART_SetConfig+0x348>
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	e147      	b.n	8004090 <UART_SetConfig+0x348>
 8003e00:	2310      	movs	r3, #16
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e144      	b.n	8004090 <UART_SetConfig+0x348>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a83      	ldr	r2, [pc, #524]	@ (8004018 <UART_SetConfig+0x2d0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d132      	bne.n	8003e76 <UART_SetConfig+0x12e>
 8003e10:	4b80      	ldr	r3, [pc, #512]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d828      	bhi.n	8003e70 <UART_SetConfig+0x128>
 8003e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <UART_SetConfig+0xdc>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08003e71 	.word	0x08003e71
 8003e2c:	08003e71 	.word	0x08003e71
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e65 	.word	0x08003e65
 8003e38:	08003e71 	.word	0x08003e71
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08003e71 	.word	0x08003e71
 8003e44:	08003e5f 	.word	0x08003e5f
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e71 	.word	0x08003e71
 8003e54:	08003e6b 	.word	0x08003e6b
 8003e58:	2300      	movs	r3, #0
 8003e5a:	77fb      	strb	r3, [r7, #31]
 8003e5c:	e118      	b.n	8004090 <UART_SetConfig+0x348>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	e115      	b.n	8004090 <UART_SetConfig+0x348>
 8003e64:	2304      	movs	r3, #4
 8003e66:	77fb      	strb	r3, [r7, #31]
 8003e68:	e112      	b.n	8004090 <UART_SetConfig+0x348>
 8003e6a:	2308      	movs	r3, #8
 8003e6c:	77fb      	strb	r3, [r7, #31]
 8003e6e:	e10f      	b.n	8004090 <UART_SetConfig+0x348>
 8003e70:	2310      	movs	r3, #16
 8003e72:	77fb      	strb	r3, [r7, #31]
 8003e74:	e10c      	b.n	8004090 <UART_SetConfig+0x348>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a68      	ldr	r2, [pc, #416]	@ (800401c <UART_SetConfig+0x2d4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d120      	bne.n	8003ec2 <UART_SetConfig+0x17a>
 8003e80:	4b64      	ldr	r3, [pc, #400]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e8a:	2b30      	cmp	r3, #48	@ 0x30
 8003e8c:	d013      	beq.n	8003eb6 <UART_SetConfig+0x16e>
 8003e8e:	2b30      	cmp	r3, #48	@ 0x30
 8003e90:	d814      	bhi.n	8003ebc <UART_SetConfig+0x174>
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d009      	beq.n	8003eaa <UART_SetConfig+0x162>
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d810      	bhi.n	8003ebc <UART_SetConfig+0x174>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <UART_SetConfig+0x15c>
 8003e9e:	2b10      	cmp	r3, #16
 8003ea0:	d006      	beq.n	8003eb0 <UART_SetConfig+0x168>
 8003ea2:	e00b      	b.n	8003ebc <UART_SetConfig+0x174>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e0f2      	b.n	8004090 <UART_SetConfig+0x348>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e0ef      	b.n	8004090 <UART_SetConfig+0x348>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e0ec      	b.n	8004090 <UART_SetConfig+0x348>
 8003eb6:	2308      	movs	r3, #8
 8003eb8:	77fb      	strb	r3, [r7, #31]
 8003eba:	e0e9      	b.n	8004090 <UART_SetConfig+0x348>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	77fb      	strb	r3, [r7, #31]
 8003ec0:	e0e6      	b.n	8004090 <UART_SetConfig+0x348>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a56      	ldr	r2, [pc, #344]	@ (8004020 <UART_SetConfig+0x2d8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d120      	bne.n	8003f0e <UART_SetConfig+0x1c6>
 8003ecc:	4b51      	ldr	r3, [pc, #324]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ed8:	d013      	beq.n	8003f02 <UART_SetConfig+0x1ba>
 8003eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8003edc:	d814      	bhi.n	8003f08 <UART_SetConfig+0x1c0>
 8003ede:	2b80      	cmp	r3, #128	@ 0x80
 8003ee0:	d009      	beq.n	8003ef6 <UART_SetConfig+0x1ae>
 8003ee2:	2b80      	cmp	r3, #128	@ 0x80
 8003ee4:	d810      	bhi.n	8003f08 <UART_SetConfig+0x1c0>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <UART_SetConfig+0x1a8>
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d006      	beq.n	8003efc <UART_SetConfig+0x1b4>
 8003eee:	e00b      	b.n	8003f08 <UART_SetConfig+0x1c0>
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e0cc      	b.n	8004090 <UART_SetConfig+0x348>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e0c9      	b.n	8004090 <UART_SetConfig+0x348>
 8003efc:	2304      	movs	r3, #4
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e0c6      	b.n	8004090 <UART_SetConfig+0x348>
 8003f02:	2308      	movs	r3, #8
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e0c3      	b.n	8004090 <UART_SetConfig+0x348>
 8003f08:	2310      	movs	r3, #16
 8003f0a:	77fb      	strb	r3, [r7, #31]
 8003f0c:	e0c0      	b.n	8004090 <UART_SetConfig+0x348>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a44      	ldr	r2, [pc, #272]	@ (8004024 <UART_SetConfig+0x2dc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d125      	bne.n	8003f64 <UART_SetConfig+0x21c>
 8003f18:	4b3e      	ldr	r3, [pc, #248]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f26:	d017      	beq.n	8003f58 <UART_SetConfig+0x210>
 8003f28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f2c:	d817      	bhi.n	8003f5e <UART_SetConfig+0x216>
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f32:	d00b      	beq.n	8003f4c <UART_SetConfig+0x204>
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f38:	d811      	bhi.n	8003f5e <UART_SetConfig+0x216>
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <UART_SetConfig+0x1fe>
 8003f3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f42:	d006      	beq.n	8003f52 <UART_SetConfig+0x20a>
 8003f44:	e00b      	b.n	8003f5e <UART_SetConfig+0x216>
 8003f46:	2300      	movs	r3, #0
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e0a1      	b.n	8004090 <UART_SetConfig+0x348>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e09e      	b.n	8004090 <UART_SetConfig+0x348>
 8003f52:	2304      	movs	r3, #4
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e09b      	b.n	8004090 <UART_SetConfig+0x348>
 8003f58:	2308      	movs	r3, #8
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e098      	b.n	8004090 <UART_SetConfig+0x348>
 8003f5e:	2310      	movs	r3, #16
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e095      	b.n	8004090 <UART_SetConfig+0x348>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2f      	ldr	r2, [pc, #188]	@ (8004028 <UART_SetConfig+0x2e0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d125      	bne.n	8003fba <UART_SetConfig+0x272>
 8003f6e:	4b29      	ldr	r3, [pc, #164]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f7c:	d017      	beq.n	8003fae <UART_SetConfig+0x266>
 8003f7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f82:	d817      	bhi.n	8003fb4 <UART_SetConfig+0x26c>
 8003f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f88:	d00b      	beq.n	8003fa2 <UART_SetConfig+0x25a>
 8003f8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f8e:	d811      	bhi.n	8003fb4 <UART_SetConfig+0x26c>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <UART_SetConfig+0x254>
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f98:	d006      	beq.n	8003fa8 <UART_SetConfig+0x260>
 8003f9a:	e00b      	b.n	8003fb4 <UART_SetConfig+0x26c>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e076      	b.n	8004090 <UART_SetConfig+0x348>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e073      	b.n	8004090 <UART_SetConfig+0x348>
 8003fa8:	2304      	movs	r3, #4
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e070      	b.n	8004090 <UART_SetConfig+0x348>
 8003fae:	2308      	movs	r3, #8
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e06d      	b.n	8004090 <UART_SetConfig+0x348>
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e06a      	b.n	8004090 <UART_SetConfig+0x348>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a1b      	ldr	r2, [pc, #108]	@ (800402c <UART_SetConfig+0x2e4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d138      	bne.n	8004036 <UART_SetConfig+0x2ee>
 8003fc4:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <UART_SetConfig+0x2cc>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003fce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fd2:	d017      	beq.n	8004004 <UART_SetConfig+0x2bc>
 8003fd4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003fd8:	d82a      	bhi.n	8004030 <UART_SetConfig+0x2e8>
 8003fda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fde:	d00b      	beq.n	8003ff8 <UART_SetConfig+0x2b0>
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe4:	d824      	bhi.n	8004030 <UART_SetConfig+0x2e8>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <UART_SetConfig+0x2aa>
 8003fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fee:	d006      	beq.n	8003ffe <UART_SetConfig+0x2b6>
 8003ff0:	e01e      	b.n	8004030 <UART_SetConfig+0x2e8>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	77fb      	strb	r3, [r7, #31]
 8003ff6:	e04b      	b.n	8004090 <UART_SetConfig+0x348>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e048      	b.n	8004090 <UART_SetConfig+0x348>
 8003ffe:	2304      	movs	r3, #4
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e045      	b.n	8004090 <UART_SetConfig+0x348>
 8004004:	2308      	movs	r3, #8
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e042      	b.n	8004090 <UART_SetConfig+0x348>
 800400a:	bf00      	nop
 800400c:	efff69f3 	.word	0xefff69f3
 8004010:	40011000 	.word	0x40011000
 8004014:	40023800 	.word	0x40023800
 8004018:	40004400 	.word	0x40004400
 800401c:	40004800 	.word	0x40004800
 8004020:	40004c00 	.word	0x40004c00
 8004024:	40005000 	.word	0x40005000
 8004028:	40011400 	.word	0x40011400
 800402c:	40007800 	.word	0x40007800
 8004030:	2310      	movs	r3, #16
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e02c      	b.n	8004090 <UART_SetConfig+0x348>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a72      	ldr	r2, [pc, #456]	@ (8004204 <UART_SetConfig+0x4bc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d125      	bne.n	800408c <UART_SetConfig+0x344>
 8004040:	4b71      	ldr	r3, [pc, #452]	@ (8004208 <UART_SetConfig+0x4c0>)
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004046:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800404a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800404e:	d017      	beq.n	8004080 <UART_SetConfig+0x338>
 8004050:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004054:	d817      	bhi.n	8004086 <UART_SetConfig+0x33e>
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800405a:	d00b      	beq.n	8004074 <UART_SetConfig+0x32c>
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004060:	d811      	bhi.n	8004086 <UART_SetConfig+0x33e>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <UART_SetConfig+0x326>
 8004066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800406a:	d006      	beq.n	800407a <UART_SetConfig+0x332>
 800406c:	e00b      	b.n	8004086 <UART_SetConfig+0x33e>
 800406e:	2300      	movs	r3, #0
 8004070:	77fb      	strb	r3, [r7, #31]
 8004072:	e00d      	b.n	8004090 <UART_SetConfig+0x348>
 8004074:	2302      	movs	r3, #2
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e00a      	b.n	8004090 <UART_SetConfig+0x348>
 800407a:	2304      	movs	r3, #4
 800407c:	77fb      	strb	r3, [r7, #31]
 800407e:	e007      	b.n	8004090 <UART_SetConfig+0x348>
 8004080:	2308      	movs	r3, #8
 8004082:	77fb      	strb	r3, [r7, #31]
 8004084:	e004      	b.n	8004090 <UART_SetConfig+0x348>
 8004086:	2310      	movs	r3, #16
 8004088:	77fb      	strb	r3, [r7, #31]
 800408a:	e001      	b.n	8004090 <UART_SetConfig+0x348>
 800408c:	2310      	movs	r3, #16
 800408e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004098:	d15b      	bne.n	8004152 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800409a:	7ffb      	ldrb	r3, [r7, #31]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d828      	bhi.n	80040f2 <UART_SetConfig+0x3aa>
 80040a0:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <UART_SetConfig+0x360>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	080040f3 	.word	0x080040f3
 80040b8:	080040e3 	.word	0x080040e3
 80040bc:	080040f3 	.word	0x080040f3
 80040c0:	080040f3 	.word	0x080040f3
 80040c4:	080040f3 	.word	0x080040f3
 80040c8:	080040eb 	.word	0x080040eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040cc:	f7fe f92c 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 80040d0:	61b8      	str	r0, [r7, #24]
        break;
 80040d2:	e013      	b.n	80040fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040d4:	f7fe f93c 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 80040d8:	61b8      	str	r0, [r7, #24]
        break;
 80040da:	e00f      	b.n	80040fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040dc:	4b4b      	ldr	r3, [pc, #300]	@ (800420c <UART_SetConfig+0x4c4>)
 80040de:	61bb      	str	r3, [r7, #24]
        break;
 80040e0:	e00c      	b.n	80040fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040e2:	f7fe f84f 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 80040e6:	61b8      	str	r0, [r7, #24]
        break;
 80040e8:	e008      	b.n	80040fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e004      	b.n	80040fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	77bb      	strb	r3, [r7, #30]
        break;
 80040fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d074      	beq.n	80041ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	005a      	lsls	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	085b      	lsrs	r3, r3, #1
 800410c:	441a      	add	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	fbb2 f3f3 	udiv	r3, r2, r3
 8004116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0f      	cmp	r3, #15
 800411c:	d916      	bls.n	800414c <UART_SetConfig+0x404>
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004124:	d212      	bcs.n	800414c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f023 030f 	bic.w	r3, r3, #15
 800412e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	b29b      	uxth	r3, r3
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	b29a      	uxth	r2, r3
 800413c:	89fb      	ldrh	r3, [r7, #14]
 800413e:	4313      	orrs	r3, r2
 8004140:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	89fa      	ldrh	r2, [r7, #14]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	e04f      	b.n	80041ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	77bb      	strb	r3, [r7, #30]
 8004150:	e04c      	b.n	80041ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004152:	7ffb      	ldrb	r3, [r7, #31]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d828      	bhi.n	80041aa <UART_SetConfig+0x462>
 8004158:	a201      	add	r2, pc, #4	@ (adr r2, 8004160 <UART_SetConfig+0x418>)
 800415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415e:	bf00      	nop
 8004160:	08004185 	.word	0x08004185
 8004164:	0800418d 	.word	0x0800418d
 8004168:	08004195 	.word	0x08004195
 800416c:	080041ab 	.word	0x080041ab
 8004170:	0800419b 	.word	0x0800419b
 8004174:	080041ab 	.word	0x080041ab
 8004178:	080041ab 	.word	0x080041ab
 800417c:	080041ab 	.word	0x080041ab
 8004180:	080041a3 	.word	0x080041a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004184:	f7fe f8d0 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
 8004188:	61b8      	str	r0, [r7, #24]
        break;
 800418a:	e013      	b.n	80041b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800418c:	f7fe f8e0 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8004190:	61b8      	str	r0, [r7, #24]
        break;
 8004192:	e00f      	b.n	80041b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004194:	4b1d      	ldr	r3, [pc, #116]	@ (800420c <UART_SetConfig+0x4c4>)
 8004196:	61bb      	str	r3, [r7, #24]
        break;
 8004198:	e00c      	b.n	80041b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419a:	f7fd fff3 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800419e:	61b8      	str	r0, [r7, #24]
        break;
 80041a0:	e008      	b.n	80041b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041a6:	61bb      	str	r3, [r7, #24]
        break;
 80041a8:	e004      	b.n	80041b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	77bb      	strb	r3, [r7, #30]
        break;
 80041b2:	bf00      	nop
    }

    if (pclk != 0U)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d018      	beq.n	80041ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	085a      	lsrs	r2, r3, #1
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	441a      	add	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b0f      	cmp	r3, #15
 80041d2:	d909      	bls.n	80041e8 <UART_SetConfig+0x4a0>
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041da:	d205      	bcs.n	80041e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	b29a      	uxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60da      	str	r2, [r3, #12]
 80041e6:	e001      	b.n	80041ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40007c00 	.word	0x40007c00
 8004208:	40023800 	.word	0x40023800
 800420c:	00f42400 	.word	0x00f42400

08004210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d01a      	beq.n	8004326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800430e:	d10a      	bne.n	8004326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	605a      	str	r2, [r3, #4]
  }
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	@ 0x30
 8004358:	af02      	add	r7, sp, #8
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004364:	f7fc ff5e 	bl	8001224 <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d12e      	bne.n	80043d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004378:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	2200      	movs	r2, #0
 8004382:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f83b 	bl	8004402 <UART_WaitOnFlagUntilTimeout>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d021      	beq.n	80043d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69b9      	ldr	r1, [r7, #24]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	617b      	str	r3, [r7, #20]
   return(result);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e6      	bne.n	8004392 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e011      	b.n	80043fa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2220      	movs	r2, #32
 80043da:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3728      	adds	r7, #40	@ 0x28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004412:	e04f      	b.n	80044b4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d04b      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441c:	f7fc ff02 	bl	8001224 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	429a      	cmp	r2, r3
 800442a:	d302      	bcc.n	8004432 <UART_WaitOnFlagUntilTimeout+0x30>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e04e      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d037      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b80      	cmp	r3, #128	@ 0x80
 8004448:	d034      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b40      	cmp	r3, #64	@ 0x40
 800444e:	d031      	beq.n	80044b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b08      	cmp	r3, #8
 800445c:	d110      	bne.n	8004480 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2208      	movs	r2, #8
 8004464:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8fe 	bl	8004668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2208      	movs	r2, #8
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e029      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800448a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448e:	d111      	bne.n	80044b4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004498:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f8e4 	bl	8004668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2220      	movs	r2, #32
 80044a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e00f      	b.n	80044d4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4013      	ands	r3, r2
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d0a0      	beq.n	8004414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044dc:	b480      	push	{r7}
 80044de:	b097      	sub	sp, #92	@ 0x5c
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	88fa      	ldrh	r2, [r7, #6]
 80044f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450e:	d10e      	bne.n	800452e <UART_Start_Receive_IT+0x52>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <UART_Start_Receive_IT+0x48>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800451e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004522:	e02d      	b.n	8004580 <UART_Start_Receive_IT+0xa4>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	22ff      	movs	r2, #255	@ 0xff
 8004528:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800452c:	e028      	b.n	8004580 <UART_Start_Receive_IT+0xa4>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10d      	bne.n	8004552 <UART_Start_Receive_IT+0x76>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d104      	bne.n	8004548 <UART_Start_Receive_IT+0x6c>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	22ff      	movs	r2, #255	@ 0xff
 8004542:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004546:	e01b      	b.n	8004580 <UART_Start_Receive_IT+0xa4>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	227f      	movs	r2, #127	@ 0x7f
 800454c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004550:	e016      	b.n	8004580 <UART_Start_Receive_IT+0xa4>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800455a:	d10d      	bne.n	8004578 <UART_Start_Receive_IT+0x9c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d104      	bne.n	800456e <UART_Start_Receive_IT+0x92>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	227f      	movs	r2, #127	@ 0x7f
 8004568:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800456c:	e008      	b.n	8004580 <UART_Start_Receive_IT+0xa4>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	223f      	movs	r2, #63	@ 0x3f
 8004572:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004576:	e003      	b.n	8004580 <UART_Start_Receive_IT+0xa4>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2222      	movs	r2, #34	@ 0x22
 800458c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3308      	adds	r3, #8
 8004596:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	3308      	adds	r3, #8
 80045ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80045b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80045be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045cc:	d107      	bne.n	80045de <UART_Start_Receive_IT+0x102>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4a21      	ldr	r2, [pc, #132]	@ (8004660 <UART_Start_Receive_IT+0x184>)
 80045da:	669a      	str	r2, [r3, #104]	@ 0x68
 80045dc:	e002      	b.n	80045e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a20      	ldr	r2, [pc, #128]	@ (8004664 <UART_Start_Receive_IT+0x188>)
 80045e2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d019      	beq.n	8004620 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
 800460c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004610:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004612:	e841 2300 	strex	r3, r2, [r1]
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1e6      	bne.n	80045ec <UART_Start_Receive_IT+0x110>
 800461e:	e018      	b.n	8004652 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	e853 3f00 	ldrex	r3, [r3]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f043 0320 	orr.w	r3, r3, #32
 8004634:	653b      	str	r3, [r7, #80]	@ 0x50
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004642:	69f9      	ldr	r1, [r7, #28]
 8004644:	6a3a      	ldr	r2, [r7, #32]
 8004646:	e841 2300 	strex	r3, r2, [r1]
 800464a:	61bb      	str	r3, [r7, #24]
   return(result);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1e6      	bne.n	8004620 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	375c      	adds	r7, #92	@ 0x5c
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	08004959 	.word	0x08004959
 8004664:	080047b1 	.word	0x080047b1

08004668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b095      	sub	sp, #84	@ 0x54
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	461a      	mov	r2, r3
 800468c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800468e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004690:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800469c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e6      	bne.n	8004670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3308      	adds	r3, #8
 80046a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f023 0301 	bic.w	r3, r3, #1
 80046b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3308      	adds	r3, #8
 80046c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e5      	bne.n	80046a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d118      	bne.n	8004710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f023 0310 	bic.w	r3, r3, #16
 80046f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	6979      	ldr	r1, [r7, #20]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	613b      	str	r3, [r7, #16]
   return(result);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e6      	bne.n	80046de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004724:	bf00      	nop
 8004726:	3754      	adds	r7, #84	@ 0x54
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fae4 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004754:	bf00      	nop
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	60bb      	str	r3, [r7, #8]
   return(result);
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6979      	ldr	r1, [r7, #20]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	613b      	str	r3, [r7, #16]
   return(result);
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e6      	bne.n	8004764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fab0 	bl	8003d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a8:	bf00      	nop
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b09c      	sub	sp, #112	@ 0x70
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80047be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047c8:	2b22      	cmp	r3, #34	@ 0x22
 80047ca:	f040 80b9 	bne.w	8004940 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80047dc:	b2d9      	uxtb	r1, r3
 80047de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e8:	400a      	ands	r2, r1
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 809c 	bne.w	8004950 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800482c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	461a      	mov	r2, r3
 8004834:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004836:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004838:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800483c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e6      	bne.n	8004818 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800485a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	667b      	str	r3, [r7, #100]	@ 0x64
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	3308      	adds	r3, #8
 8004868:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800486a:	647a      	str	r2, [r7, #68]	@ 0x44
 800486c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004870:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004872:	e841 2300 	strex	r3, r2, [r1]
 8004876:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e5      	bne.n	800484a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d018      	beq.n	80048d2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	623b      	str	r3, [r7, #32]
   return(result);
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30
 80048c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d12e      	bne.n	8004938 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 0310 	bic.w	r3, r3, #16
 80048f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	69b9      	ldr	r1, [r7, #24]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	617b      	str	r3, [r7, #20]
   return(result);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e6      	bne.n	80048e0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b10      	cmp	r3, #16
 800491e:	d103      	bne.n	8004928 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2210      	movs	r2, #16
 8004926:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800492e:	4619      	mov	r1, r3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff f9fd 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004936:	e00b      	b.n	8004950 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7fb ff7f 	bl	800083c <HAL_UART_RxCpltCallback>
}
 800493e:	e007      	b.n	8004950 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0208 	orr.w	r2, r2, #8
 800494e:	619a      	str	r2, [r3, #24]
}
 8004950:	bf00      	nop
 8004952:	3770      	adds	r7, #112	@ 0x70
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b09c      	sub	sp, #112	@ 0x70
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004966:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004970:	2b22      	cmp	r3, #34	@ 0x22
 8004972:	f040 80b9 	bne.w	8004ae8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004986:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800498a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800498e:	4013      	ands	r3, r2
 8004990:	b29a      	uxth	r2, r3
 8004992:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004994:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 809c 	bne.w	8004af8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80049ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049de:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80049e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80049ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e6      	bne.n	80049c0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3308      	adds	r3, #8
 80049f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	f023 0301 	bic.w	r3, r3, #1
 8004a08:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a12:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a1a:	e841 2300 	strex	r3, r2, [r1]
 8004a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e5      	bne.n	80049f2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d018      	beq.n	8004a7a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a68:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e6      	bne.n	8004a48 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d12e      	bne.n	8004ae0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f023 0310 	bic.w	r3, r3, #16
 8004a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6979      	ldr	r1, [r7, #20]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e6      	bne.n	8004a88 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d103      	bne.n	8004ad0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2210      	movs	r2, #16
 8004ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff f929 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ade:	e00b      	b.n	8004af8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7fb feab 	bl	800083c <HAL_UART_RxCpltCallback>
}
 8004ae6:	e007      	b.n	8004af8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0208 	orr.w	r2, r2, #8
 8004af6:	619a      	str	r2, [r3, #24]
}
 8004af8:	bf00      	nop
 8004afa:	3770      	adds	r7, #112	@ 0x70
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <memset>:
 8004b00:	4402      	add	r2, r0
 8004b02:	4603      	mov	r3, r0
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d100      	bne.n	8004b0a <memset+0xa>
 8004b08:	4770      	bx	lr
 8004b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b0e:	e7f9      	b.n	8004b04 <memset+0x4>

08004b10 <__libc_init_array>:
 8004b10:	b570      	push	{r4, r5, r6, lr}
 8004b12:	4d0d      	ldr	r5, [pc, #52]	@ (8004b48 <__libc_init_array+0x38>)
 8004b14:	4c0d      	ldr	r4, [pc, #52]	@ (8004b4c <__libc_init_array+0x3c>)
 8004b16:	1b64      	subs	r4, r4, r5
 8004b18:	10a4      	asrs	r4, r4, #2
 8004b1a:	2600      	movs	r6, #0
 8004b1c:	42a6      	cmp	r6, r4
 8004b1e:	d109      	bne.n	8004b34 <__libc_init_array+0x24>
 8004b20:	4d0b      	ldr	r5, [pc, #44]	@ (8004b50 <__libc_init_array+0x40>)
 8004b22:	4c0c      	ldr	r4, [pc, #48]	@ (8004b54 <__libc_init_array+0x44>)
 8004b24:	f000 f818 	bl	8004b58 <_init>
 8004b28:	1b64      	subs	r4, r4, r5
 8004b2a:	10a4      	asrs	r4, r4, #2
 8004b2c:	2600      	movs	r6, #0
 8004b2e:	42a6      	cmp	r6, r4
 8004b30:	d105      	bne.n	8004b3e <__libc_init_array+0x2e>
 8004b32:	bd70      	pop	{r4, r5, r6, pc}
 8004b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b38:	4798      	blx	r3
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7ee      	b.n	8004b1c <__libc_init_array+0xc>
 8004b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b42:	4798      	blx	r3
 8004b44:	3601      	adds	r6, #1
 8004b46:	e7f2      	b.n	8004b2e <__libc_init_array+0x1e>
 8004b48:	08004c84 	.word	0x08004c84
 8004b4c:	08004c84 	.word	0x08004c84
 8004b50:	08004c84 	.word	0x08004c84
 8004b54:	08004c88 	.word	0x08004c88

08004b58 <_init>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr

08004b64 <_fini>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr
